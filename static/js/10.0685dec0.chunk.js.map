{"version":3,"sources":["src/components/Heading.tsx","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","assets/flags/us.png","assets/flags/cn.png","assets/flags/kr.png","src/components/Border.tsx","src/components/ErrorMessage.tsx","src/components/InfoBox.tsx","src/components/AmountMeta.tsx","src/components/InsufficientBalanceButton.tsx","src/components/FetchingButton.tsx","src/components/Notice.tsx","src/components/TokenInput.tsx","src/utils/api-utils.ts","src/components/Input.tsx","src/hooks/useSTStakingState.tsx","src/screens/SHTUnstakeScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","Column","View","width","marginTop","noTopMargin","Platform","OS","large","normal","SocialIcon","darkMode","useContext","GlobalContext","background","textLight","light","iconColor","undefined","backgroundColor","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onPressDiscord","onPressHome","FlexView","justifyContent","name","raised","reverse","reverseColor","containerStyle","flags","us","require","cn","kr","Flag","locale","history","useHistory","location","useLocation","TouchableHighlight","push","pathname","marginHorizontal","Image","source","WebFooter","padding","Text","note","Constants","manifest","version","module","exports","Border","border","ErrorMessage","error","code","message","InfoBox","backgroundLight","borderDark","useStyles","AmountMeta","t","useTranslation","textDark","placeholder","amount","suffix","InsufficientBalanceButton","symbol","FetchingButton","Notice","borderStyle","clear","titleStyle","paddingVertical","alignSelf","MaxButton","onPressMax","useCallback","token","balance","isETH","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","maxButtonText","TokenInput","onChangeText","onAmountChanged","parseBalance","e","endsWith","indexOf","length","label","value","keyboardType","autoFocus","inputStyle","inputContainerStyle","borderBottomWidth","labelStyle","fontFamily","paddingTop","hideMaxButton","fetchTotalMinedRTokenInpool","provider","a","async","contract","getContract","BTCSTFarm","viewAllTimeTotalMined","fetchCurrentTotalStakedSTokenInpool","BTCST","balanceOf","console","log","viewTotalRewardInPoolFrom","account","totalSupplyOfSToken","totalSupply","getFreeToTransferAmount","viewUserInfo","stakeActions","enter","signer","farm","estimateGas","apiDepositToMining","gasLimit","toString","mul","div","tx","logTransaction","leave","apiWithdrawLatestSToken","viewTotalMinedRewardFrom","viewGetTotalRewardBalanceInPool","apiClaimAmountOfReward","reCalculate","Input","textMedium","onError","errors","forbidden","forEach","validation","match","regexp","allowed","join","minHeight","outline","placeholderTextColor","errorStyle","useSTStakingState","EthersContext","address","getTokenAllowance","tokens","updateTokens","useState","setAmount","stoken","setSToken","loading","setloading","stokenAllowed","setSTokenAllowed","yourTotalSToken","setYourTotalSToken","yourFreeToSendSToken","setYourFreeToSendSToken","yourSTokenStaked","setYourSTokenStaked","totalSTokenSupply","setTotalSTokenSupply","entering","setEntering","leaving","setLeaving","txHappend","setTxHappend","sToken","logoURI","BigNumber","from","useEffect","useAsyncEffect","minAllowance","pow","stokenAllowance","gte","getAddress","freeToMove","userInfoInFarm","stokenContract","onEnter","parsed","wait","onLeave","Staking","state","STokenBalance","AmountInput","isZero","UnstakeInfo","isEmptyValue","unStakeAmount","Controls","setError","UnstakeButton","SHTUnstakeScreen"],"mappings":"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","file":"static/js/10.0685dec0.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"https://twitter.com/standardhashrate\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/Standard-Hashrate-Group\", \"\", \"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.gg/standardhashrate\", \"\", \"_blank\");\n    const onPressHome = useLinker(\"https://www.1-b.tc\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <SocialIcon type=\"wordpress\" onPress={onPressHome} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport Column from \"../Column\";\nimport FlexView from \"../FlexView\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst flags = {\n    us: require(\"../../../assets/flags/us.png\"),\n    cn: require(\"../../../assets/flags/cn.png\"),\n    kr: require(\"../../../assets/flags/kr.png\")\n};\n\nconst WebFooter = () => {\n    const onPressAlchemy = useLinker(\n        \"https://dashboard.alchemyapi.io/signup?referral=429fb682-0d85-40ab-ad88-daf847cf7c63\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ width: \"100%\", padding: Spacing.normal, alignItems: \"center\" }}>\n                <SocialIcons />\n                {/* <TouchableHighlight onPress={onPressAlchemy}>\n                    <Image\n                        source={require(\"../../../assets/alchemy.png\")}\n                        style={{ width: 188, height: 40, marginTop: Spacing.tiny }}\n                    />\n                </TouchableHighlight> */}\n                <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                    Built with ❤️ by StandardHashrate (v{Constants.manifest.version})\n                </Text>\n                <FlexView style={{ marginTop: Spacing.small }}>\n                    <Flag name={\"us\"} locale={\"en\"} />\n                    <Flag name={\"cn\"} locale={\"zh\"} />\n                    <Flag name={\"kr\"} locale={\"ko\"} />\n                </FlexView>\n            </View>\n        </Column>\n    );\n};\n\nconst Flag = ({ name, locale }) => {\n    const history = useHistory();\n    const location = useLocation();\n    const onPress = () => {\n        history.push(location.pathname + \"?locale=\" + locale);\n    };\n    return (\n        <TouchableHighlight onPress={onPress} style={{ marginHorizontal: 4 }}>\n            <Image source={flags[name]} style={{ width: 30, height: 20 }} />\n        </TouchableHighlight>\n    );\n};\n\nexport default WebFooter;\n","module.exports = __webpack_public_path__ + \"static/media/us.d367121f.png\";","module.exports = __webpack_public_path__ + \"static/media/cn.baedda5d.png\";","module.exports = __webpack_public_path__ + \"static/media/kr.146730ea.png\";","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    const t = useTranslation();\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"fetching\")} disabled={true} />;\n};\nexport default FetchingButton;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isETH, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"numeric\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (isETH(props.token)) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import { FACTORY_ADDRESS as SUSHISWAP_FACTORY, Pair } from \"@sushiswap/sdk\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport { FACTORY_ADDRESS as UNISWAP_FACTORY } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\n\nimport Fraction from \"../constants/Fraction\";\nimport { ETH } from \"../constants/tokens\";\nimport { ALCHEMY_PROVIDER } from \"../context/EthersContext\";\nimport { Order, OrderStatus } from \"../hooks/useSettlement\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { useCallback } from \"react\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nimport {\n    convertToken,\n    formatBalance,\n    getContract,\n    isETH,\n    isWETH,\n    parseBalance,\n    parseCurrencyAmount,\n    pow10\n} from \"./index\";\nexport const fetchTotalMinedRTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewAllTimeTotalMined();\n    return value;\n};\n\nexport const fetchCurrentTotalStakedSTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.balanceOf(BTCSTFarm);\n    console.log(\"fetchCurrentTotalStakedSTokenInpool\");\n    console.log(value);\n    return value;\n};\n\nexport const viewTotalRewardInPoolFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPoolFrom(account);\n    return value;\n    \n};\nexport const totalSupplyOfSToken = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.totalSupply();\n    return value;\n};\n\nexport const viewTotalRewardInPool = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPool();\n    return value;\n};\n\nexport const getFreeToTransferAmount = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"ISTokenERC20\",BTCST,provider);\n    const value = await contract.getFreeToTransferAmount(account);\n    return value;\n};\n\nexport const viewUserInfo = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewUserInfo(account);\n    return value;\n};\n\nexport const stakeActions = ()=>{\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiDepositToMining(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiDepositToMining(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiWithdrawLatestSToken(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiWithdrawLatestSToken(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport const viewTotalMinedRewardFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalMinedRewardFrom(account);\n    return value;\n};\n\nexport const viewGetTotalRewardBalanceInPool = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewGetTotalRewardBalanceInPool(account);\n    return value;\n};\n\nexport const apiClaimAmountOfReward = async(account: string,amount: ethers.BigNumber,reCalculate :boolean ,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.apiClaimAmountOfReward(account,amount,reCalculate);\n    return value;\n};","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport { isWETH } from \"../utils\";\nimport { fetchLPTokenWithValue, fetchMyLPTokens, fetchMyPools } from \"../utils/fetch-utils\";\nimport useSDK from \"./useSDK\";\nimport { viewUserInfo,getFreeToTransferAmount,totalSupplyOfSToken,stakeActions, fetchCurrentTotalStakedSTokenInpool,viewTotalRewardInPoolFrom} from \"../utils/api-utils\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { getContract, parseBalance } from \"../utils\";\n\nexport interface StakingState {\n    loading:boolean;\n    stoken?: Token;\n    \n    amount: string;\n    setAmount: (amount: string) => void;\n\n    yourTotalSToken:ethers.BigNumber;\n    yourFreeToSendSToken:ethers.BigNumber;\n    yourSTokenStaked:ethers.BigNumber;\n\n    stokenAllowed: boolean;\n    setSTokenAllowed: (allowed: boolean) => void;\n    \n    totalSTokenSupply:ethers.BigNumber;\n\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n\n    txHappend:number;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useSTStakingState = () => {\n    const { provider,signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n\n    const [amount, setAmount] = useState(\"\");\n    const { enter, leave } = stakeActions();\n    const [stoken,setSToken] = useState<Token>();\n    const [loading,setloading] = useState(true);\n    const [stokenAllowed, setSTokenAllowed] = useState(false);\n\n    const [yourTotalSToken,setYourTotalSToken] = useState<ethers.BigNumber>();\n    const [yourFreeToSendSToken,setYourFreeToSendSToken] = useState<ethers.BigNumber>();\n    const [yourSTokenStaked,setYourSTokenStaked] = useState<ethers.BigNumber>();\n    const [totalSTokenSupply,setTotalSTokenSupply] = useState<ethers.BigNumber>();\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n    const [txHappend,setTxHappend] = useState<number>(0);\n\n    const sToken :Token ={\n        name: \"Standard BTC Hashrate Token\",\n        address: BTCST,\n        decimals: 18,\n        symbol: \"BTCST\",\n        logoURI: \"\",\n        balance: ethers.BigNumber.from(0)\n    };\n\n    useEffect(() => {\n        setAmount(\"\");\n        setSToken(sToken);\n        setloading(true);\n        setYourFreeToSendSToken(ethers.BigNumber.from(0));\n        setYourSTokenStaked(ethers.BigNumber.from(0));\n        setYourTotalSToken(ethers.BigNumber.from(0));\n        setTxHappend(0);\n    }, [address]);\n    useAsyncEffect(async()=>{\n        if (provider && signer && stoken) {\n            setSTokenAllowed(false);\n            setloading(true);\n            try{\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const stokenAllowance = await getTokenAllowance(stoken.address, BTCSTFarm);\n                setSTokenAllowed(ethers.BigNumber.from(stokenAllowance).gte(minAllowance));\n                const freeToMove = await getFreeToTransferAmount(await signer.getAddress(),provider);\n                const userInfoInFarm = await viewUserInfo(await signer.getAddress(),provider);\n                setYourFreeToSendSToken(await freeToMove);\n                setYourSTokenStaked((await userInfoInFarm).amount);\n                const stokenContract = getContract(\"ERC20\", BTCST, signer);\n                setYourTotalSToken(await stokenContract.balanceOf(signer.getAddress()));\n                setTotalSTokenSupply(await totalSupplyOfSToken(provider));\n            }finally{\n                setloading(false);\n            }\n        }\n    },[provider,signer,stoken,txHappend]);\n    const onEnter = useCallback(async () => {\n        if (amount && stoken && signer) {\n            setEntering(true);\n            try {\n                const parsed = parseBalance(amount, stoken.decimals);\n                const tx = await enter(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    // await updateTokens();\n                    setAmount(\"\");\n                    const txs = txHappend+1;\n                    setTxHappend(txs);\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, stoken, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && signer &&stoken) {\n            setLeaving(true);\n            try {\n                const parsed = parseBalance(amount, stoken.decimals);\n                const tx = await leave(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    // await updateTokens();\n                    setAmount(\"\");\n                    const txs = txHappend+1;\n                    setTxHappend(txs);\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, stoken, signer]);\n    return {\n        loading,\n        amount,\n        setAmount,\n        stoken,\n        yourTotalSToken,\n        yourFreeToSendSToken,\n        yourSTokenStaked,\n        stokenAllowed,\n        setSTokenAllowed,\n        totalSTokenSupply,\n        onEnter,\n        entering,\n        onLeave,\n        leaving,\n        txHappend\n    };\n};\n\nexport default useSTStakingState;\n","import React, { useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useSTStakingState, { StakingState } from \"../hooks/useSTStakingState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst SHTUnstakeScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"unstake\")} />\n                    <Text light={true}>{t(\"unstake-desc\")}</Text>\n                    <Staking />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <StakingSubMenu />\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const t = useTranslation();\n    const state = useSTStakingState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <STokenBalance state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.stoken && state.yourSTokenStaked?.isZero()  && (\n                <Notice text={t(\"you-dont-have-staked-stoken\")} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <UnstakeInfo state={state} />\n        </View>\n    );\n};\n\nconst STokenBalance = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    return (\n        <View>\n            <Heading text={t(\"your-staked-BTCTS\")} />\n            <AmountMeta\n                style={{marginBottom: Spacing.tiny}}\n                amount={state.yourSTokenStaked ? \n                    formatBalance(state.yourSTokenStaked, state.stoken!.decimals) : \"\"}\n                suffix={\"BTCST\"}\n            />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    if (!state.stoken || state.yourSTokenStaked.isZero()) {\n        return <Heading text={t(\"amount-to-unstake\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={t(\"amount-to-unstake\")} />\n            <TokenInput\n                token={state.stoken}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\nconst UnstakeInfo = ({ state }: { state: StakingState }) => {\n    const disabled =\n        !state.stoken || !state.yourSTokenStaked\n         || state.yourSTokenStaked.isZero() \n         || isEmptyValue(state.amount);\n    const unStakeAmount = disabled\n        ? undefined\n        : parseBalance(state.amount, state.stoken!.decimals);\n    return (\n        <InfoBox>\n            <AmountMeta\n                amount={unStakeAmount ? formatBalance(unStakeAmount, state.stoken!.decimals, 8) : \"\"}\n                suffix={\"BTCST\"}\n                disabled={disabled}\n            />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.stoken || state.yourSTokenStaked.isZero() || isEmptyValue(state.amount) ? (\n                <UnstakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.stoken.decimals).gt(state.yourSTokenStaked) ? (\n                <InsufficientBalanceButton symbol={state.stoken.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <UnstakeButton state={state} onError={setError} disabled={false} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst UnstakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onLeave();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={t(\"unstake\")} loading={state.leaving} onPress={onPress} disabled={disabled} />;\n};\n\nexport default SHTUnstakeScreen;\n"],"sourceRoot":""}