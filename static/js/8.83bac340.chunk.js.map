{"version":3,"sources":["src/components/Heading.tsx","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","src/components/Border.tsx","src/components/AmountMeta.tsx","src/components/ErrorMessage.tsx","src/components/InfoBox.tsx","src/components/InsufficientBalanceButton.tsx","assets/flags/us.png","assets/flags/cn.png","assets/flags/kr.png","src/components/Notice.tsx","src/components/ApproveButton.tsx","src/components/FetchingButton.tsx","src/components/Meta.tsx","src/components/TokenInput.tsx","src/components/Input.tsx","src/hooks/useSushiBar.tsx","src/hooks/useStakingState.tsx","src/screens/StakeScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","Column","View","width","marginTop","noTopMargin","Platform","OS","large","normal","SocialIcon","darkMode","useContext","GlobalContext","background","textLight","light","iconColor","undefined","backgroundColor","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onPressDiscord","FlexView","justifyContent","name","raised","reverse","reverseColor","containerStyle","flags","us","require","cn","kr","Flag","locale","history","useHistory","location","useLocation","TouchableHighlight","push","pathname","marginHorizontal","Image","source","WebFooter","padding","Text","note","Constants","manifest","version","Border","border","AmountMeta","t","useTranslation","textDark","placeholder","amount","suffix","ErrorMessage","error","code","message","InfoBox","backgroundLight","borderDark","useStyles","InsufficientBalanceButton","symbol","module","exports","Notice","borderStyle","clear","titleStyle","paddingVertical","alignSelf","ApproveButton","approveToken","EthersContext","useState","loading","setLoading","useCallback","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","FetchingButton","Meta","textMedium","url","label","textDecorationLine","MaxButton","onPressMax","balance","isETH","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","maxButtonText","TokenInput","onChangeText","onAmountChanged","parseBalance","e","endsWith","indexOf","length","value","keyboardType","autoFocus","inputStyle","inputContainerStyle","borderBottomWidth","labelStyle","fontFamily","paddingTop","hideMaxButton","Input","errors","forbidden","forEach","validation","match","regexp","allowed","join","minHeight","outline","placeholderTextColor","errorStyle","useSushiBar","enter","signer","sushiBar","getContract","SUSHI_BAR","estimateGas","gasLimit","mul","div","logTransaction","toString","leave","useStakingState","getTokenAllowance","tokens","updateTokens","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","setAmount","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","entering","setEntering","leaving","setLeaving","sushi","useMemo","find","xSushi","useEffect","useAsyncEffect","minAllowance","BigNumber","from","pow","sushiAllowance","gte","xSushiAllowance","sushiContract","balanceOf","totalSupply","xSushiContract","onEnter","parsed","onLeave","Staking","state","SushiBalance","AmountInput","isZero","StakeInfo","isEmptyValue","xSushiAmount","xSushiTotal","xSushiBalance","add","share","Fraction","Controls","setError","StakeButton","StakeScreen"],"mappings":"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","file":"static/js/8.83bac340.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"https://twitter.com/standardhashrate\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/Standard-Hashrate-Group\", \"\", \"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.gg/standardhashrate\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport Column from \"../Column\";\nimport FlexView from \"../FlexView\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst flags = {\n    us: require(\"../../../assets/flags/us.png\"),\n    cn: require(\"../../../assets/flags/cn.png\"),\n    kr: require(\"../../../assets/flags/kr.png\")\n};\n\nconst WebFooter = () => {\n    const onPressAlchemy = useLinker(\n        \"https://dashboard.alchemyapi.io/signup?referral=429fb682-0d85-40ab-ad88-daf847cf7c63\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ width: \"100%\", padding: Spacing.normal, alignItems: \"center\" }}>\n                <SocialIcons />\n                {/* <TouchableHighlight onPress={onPressAlchemy}>\n                    <Image\n                        source={require(\"../../../assets/alchemy.png\")}\n                        style={{ width: 188, height: 40, marginTop: Spacing.tiny }}\n                    />\n                </TouchableHighlight> */}\n                <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                    Built with ❤️ by StandardHashrate (v{Constants.manifest.version})\n                </Text>\n                <FlexView style={{ marginTop: Spacing.small }}>\n                    <Flag name={\"us\"} locale={\"en\"} />\n                    <Flag name={\"cn\"} locale={\"zh\"} />\n                    <Flag name={\"kr\"} locale={\"ko\"} />\n                </FlexView>\n            </View>\n        </Column>\n    );\n};\n\nconst Flag = ({ name, locale }) => {\n    const history = useHistory();\n    const location = useLocation();\n    const onPress = () => {\n        history.push(location.pathname + \"?locale=\" + locale);\n    };\n    return (\n        <TouchableHighlight onPress={onPress} style={{ marginHorizontal: 4 }}>\n            <Image source={flags[name]} style={{ width: 30, height: 20 }} />\n        </TouchableHighlight>\n    );\n};\n\nexport default WebFooter;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    const t = useTranslation();\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","module.exports = __webpack_public_path__ + \"static/media/us.d367121f.png\";","module.exports = __webpack_public_path__ + \"static/media/cn.baedda5d.png\";","module.exports = __webpack_public_path__ + \"static/media/kr.146730ea.png\";","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const t = useTranslation();\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={t(\"approve\") + \" \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"fetching\")} disabled={true} />;\n};\nexport default FetchingButton;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : \"Fetching…\";\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text note={!IS_DESKTOP} fontWeight={\"bold\"} style={{ color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                note={!IS_DESKTOP}\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isETH, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"numeric\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (isETH(props.token)) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import { useCallback } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nconst useSushiBar = () => {\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.enter(amount);\n        const tx = await sushiBar.enter(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.leave(amount);\n        const tx = await sushiBar.leave(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport default useSushiBar;\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useSushiBar from \"./useSushiBar\";\n\nexport type StakeAction = \"sushi-balance\" | \"stake\";\nexport type UnstakeAction = \"xsushi-balance\" | \"unstake\";\n\nexport interface StakingState {\n    sushi?: Token;\n    xSushi?: Token;\n    sushiStaked?: ethers.BigNumber;\n    sushiSupply?: ethers.BigNumber;\n    xSushiSupply?: ethers.BigNumber;\n    amount: string;\n    setAmount: (amount: string) => void;\n    sushiAllowed: boolean;\n    setSushiAllowed: (allowed: boolean) => void;\n    xSushiAllowed: boolean;\n    setXSushiAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useStakingState: () => StakingState = () => {\n    const { signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n    const { enter, leave } = useSushiBar();\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\n    const [amount, setAmount] = useState(\"\");\n    const [sushiAllowed, setSushiAllowed] = useState(false);\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n\n    const sushi = useMemo(() => tokens.find(token => token.symbol === \"SUSHI\"), [tokens]);\n    const xSushi = useMemo(() => tokens.find(token => token.symbol === \"xSUSHI\"), [tokens]);\n\n    useEffect(() => {\n        setAmount(\"\");\n    }, [address]);\n\n    useAsyncEffect(async () => {\n        if (sushi && xSushi && signer) {\n            setSushiAllowed(false);\n            setXSushiAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\n\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\n                setSushiSupply(await sushiContract.totalSupply());\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\n                setXSushiSupply(await xSushiContract.totalSupply());\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [sushi, xSushi, signer]);\n\n    const onEnter = useCallback(async () => {\n        if (amount && sushi && signer) {\n            setEntering(true);\n            try {\n                const parsed = parseBalance(amount, sushi.decimals);\n                const tx = await enter(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, sushi, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && xSushi && signer) {\n            setLeaving(true);\n            try {\n                const parsed = parseBalance(amount, xSushi.decimals);\n                const tx = await leave(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, xSushi, signer]);\n\n    return {\n        sushi,\n        xSushi,\n        sushiStaked,\n        sushiSupply,\n        xSushiSupply,\n        amount,\n        setAmount,\n        sushiAllowed,\n        setSushiAllowed,\n        xSushiAllowed,\n        setXSushiAllowed,\n        loading,\n        onEnter,\n        entering,\n        onLeave,\n        leaving\n    };\n};\n\nexport default useStakingState;\n","import React, { useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport useStakingState, { StakingState } from \"../hooks/useStakingState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst StakeScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"stake\")} />\n                    <Text light={true}>{t(\"stake-desc\")}</Text>\n                    <Staking />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <StakingSubMenu />\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const t = useTranslation();\n    const state = useStakingState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <SushiBalance state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.sushi && state.sushi.balance.isZero() && (\n                <Notice text={t(\"you-dont-have-standardHashrate\")} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <StakeInfo state={state} />\n        </View>\n    );\n};\n\nconst SushiBalance = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    return (\n        <View>\n            <Heading text={t(\"your-standardHashrate\")} />\n            <AmountMeta\n                amount={state.sushi ? formatBalance(state.sushi.balance, state.sushi.decimals) : \"\"}\n                suffix={\"SUSHI\"}\n            />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    if (!state.sushi || state.sushi.balance.isZero()) {\n        return <Heading text={t(\"amount-to-stake\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={t(\"amount-to-stake\")} />\n            <TokenInput\n                token={state.sushi}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst StakeInfo = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    const disabled =\n        !state.sushi ||\n        state.sushi.balance.isZero() ||\n        !state.xSushi ||\n        !state.sushiStaked ||\n        !state.xSushiSupply ||\n        isEmptyValue(state.amount);\n    const xSushiAmount = disabled\n        ? undefined\n        : parseBalance(state.amount, state.sushi!.decimals)\n              .mul(state.xSushiSupply!)\n              .div(state.sushiStaked!);\n    const xSushiTotal = disabled ? undefined : formatBalance(state.xSushiSupply!, state.xSushi!.decimals, 8);\n    const xSushiBalance = disabled ? undefined : state.xSushi!.balance.add(xSushiAmount!);\n    const share = disabled\n        ? undefined\n        : Fraction.from(xSushiAmount!.add(xSushiBalance!), state.xSushiSupply!).toString();\n    return (\n        <InfoBox>\n            <AmountMeta\n                amount={xSushiAmount ? formatBalance(xSushiAmount, state.xSushi!.decimals, 8) : \"\"}\n                suffix={\"xSUSHI\"}\n                disabled={disabled}\n            />\n            <Meta label={t(\"xstandardHashrate-share\")} text={share} suffix={\"%\"} disabled={disabled} />\n            <Meta label={t(\"total-xstandardHashrate\")} text={xSushiTotal} disabled={disabled} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.sushi || state.sushi.balance.isZero() || isEmptyValue(state.amount) ? (\n                <StakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.sushi.decimals).gt(state.sushi.balance) ? (\n                <InsufficientBalanceButton symbol={state.sushi.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.sushi}\n                        spender={SUSHI_BAR}\n                        onSuccess={() => state.setSushiAllowed(true)}\n                        onError={setError}\n                        hidden={state.sushiAllowed}\n                    />\n                    <StakeButton state={state} onError={setError} disabled={!state.sushiAllowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst StakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onEnter();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={t(\"stake\")} loading={state.entering} onPress={onPress} disabled={disabled} />;\n};\n\nexport default StakeScreen;\n"],"sourceRoot":""}