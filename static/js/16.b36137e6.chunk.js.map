{"version":3,"sources":["src/components/Heading.tsx","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","assets/flags/us.png","assets/flags/cn.png","assets/flags/kr.png","src/components/Loading.tsx","src/utils/api-utils.ts","src/hooks/useHomeState.tsx","src/screens/SHTHomeScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","Column","View","width","marginTop","noTopMargin","Platform","OS","large","normal","SocialIcon","darkMode","useContext","GlobalContext","background","textLight","light","iconColor","undefined","backgroundColor","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onPressDiscord","onPressHome","FlexView","justifyContent","name","raised","reverse","reverseColor","containerStyle","flags","us","require","cn","kr","Flag","locale","history","useHistory","location","useLocation","TouchableHighlight","push","pathname","marginHorizontal","Image","source","WebFooter","padding","Text","note","Constants","manifest","version","module","exports","Loading","marginVertical","fetchTotalMinedRTokenInpool","provider","a","async","contract","getContract","BTCSTFarm","viewAllTimeTotalMined","value","fetchCurrentTotalStakedSTokenInpool","BTCST","balanceOf","console","log","viewTotalRewardInPoolFrom","account","totalSupplyOfSToken","totalSupply","getFreeToTransferAmount","viewUserInfo","stakeActions","enter","useCallback","amount","signer","farm","estimateGas","apiDepositToMining","gasLimit","toString","mul","div","tx","logTransaction","leave","apiWithdrawLatestSToken","viewTotalMinedRewardFrom","viewGetTotalRewardBalanceInPool","apiClaimAmountOfReward","reCalculate","useHomeState","EthersContext","address","tokens","useState","lpTokens","setLPTokens","pools","setPools","loadingLPTokens","setLoadingLPTokens","loadingPools","setLoadingPools","useSDK","getPair","loadingTotalMined","setLoadingTotalMined","totalMinedBTC","setTotalMinedBTC","totalStakedBTCST","setTotalStakedBTCST","setLoadingTotalStaked","yourBTCInpool","setYourBTCInpool","setloadingBTCInpool","totalMiningPower","setTotalMiningPower","setLoadingTotalMiningPower","useEffect","useAsyncEffect","fetched","getAddress","Home","state","TotalStaked","YourBalance","TotalMiningPower","t","useTranslation","goToSwap","loadingTokens","staked","loading","loadingTotalStaked","formatBalance","power","ethers","BigNumber","from","LoadingNumber","loadingTotalMiningPower","number","suffix","goToFarming","loadingBTCInpool","SHTHomeScreen","totalValue","huge"],"mappings":"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","file":"static/js/16.b36137e6.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"https://twitter.com/standardhashrate\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/Standard-Hashrate-Group\", \"\", \"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.gg/standardhashrate\", \"\", \"_blank\");\n    const onPressHome = useLinker(\"https://www.1-b.tc\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <SocialIcon type=\"wordpress\" onPress={onPressHome} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport Column from \"../Column\";\nimport FlexView from \"../FlexView\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst flags = {\n    us: require(\"../../../assets/flags/us.png\"),\n    cn: require(\"../../../assets/flags/cn.png\"),\n    kr: require(\"../../../assets/flags/kr.png\")\n};\n\nconst WebFooter = () => {\n    const onPressAlchemy = useLinker(\n        \"https://dashboard.alchemyapi.io/signup?referral=429fb682-0d85-40ab-ad88-daf847cf7c63\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ width: \"100%\", padding: Spacing.normal, alignItems: \"center\" }}>\n                <SocialIcons />\n                {/* <TouchableHighlight onPress={onPressAlchemy}>\n                    <Image\n                        source={require(\"../../../assets/alchemy.png\")}\n                        style={{ width: 188, height: 40, marginTop: Spacing.tiny }}\n                    />\n                </TouchableHighlight> */}\n                <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                    Built with ❤️ by StandardHashrate (v{Constants.manifest.version})\n                </Text>\n                <FlexView style={{ marginTop: Spacing.small }}>\n                    <Flag name={\"us\"} locale={\"en\"} />\n                    <Flag name={\"cn\"} locale={\"zh\"} />\n                    <Flag name={\"kr\"} locale={\"ko\"} />\n                </FlexView>\n            </View>\n        </Column>\n    );\n};\n\nconst Flag = ({ name, locale }) => {\n    const history = useHistory();\n    const location = useLocation();\n    const onPress = () => {\n        history.push(location.pathname + \"?locale=\" + locale);\n    };\n    return (\n        <TouchableHighlight onPress={onPress} style={{ marginHorizontal: 4 }}>\n            <Image source={flags[name]} style={{ width: 30, height: 20 }} />\n        </TouchableHighlight>\n    );\n};\n\nexport default WebFooter;\n","module.exports = __webpack_public_path__ + \"static/media/us.d367121f.png\";","module.exports = __webpack_public_path__ + \"static/media/cn.baedda5d.png\";","module.exports = __webpack_public_path__ + \"static/media/kr.146730ea.png\";","import React from \"react\";\nimport { ActivityIndicator } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\nconst Loading = () => <ActivityIndicator size={\"large\"} style={{ marginVertical: Spacing.large }} />;\n\nexport default Loading;\n","import { FACTORY_ADDRESS as SUSHISWAP_FACTORY, Pair } from \"@sushiswap/sdk\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport { FACTORY_ADDRESS as UNISWAP_FACTORY } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\n\nimport Fraction from \"../constants/Fraction\";\nimport { ETH } from \"../constants/tokens\";\nimport { ALCHEMY_PROVIDER } from \"../context/EthersContext\";\nimport { Order, OrderStatus } from \"../hooks/useSettlement\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { useCallback } from \"react\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nimport {\n    convertToken,\n    formatBalance,\n    getContract,\n    isETH,\n    isWETH,\n    parseBalance,\n    parseCurrencyAmount,\n    pow10\n} from \"./index\";\nexport const fetchTotalMinedRTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewAllTimeTotalMined();\n    return value;\n};\n\nexport const fetchCurrentTotalStakedSTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.balanceOf(BTCSTFarm);\n    console.log(\"fetchCurrentTotalStakedSTokenInpool\");\n    console.log(value);\n    return value;\n};\n\nexport const viewTotalRewardInPoolFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPoolFrom(account);\n    return value;\n    \n};\nexport const totalSupplyOfSToken = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.totalSupply();\n    return value;\n};\n\nexport const viewTotalRewardInPool = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPool();\n    return value;\n};\n\nexport const getFreeToTransferAmount = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"ISTokenERC20\",BTCST,provider);\n    const value = await contract.getFreeToTransferAmount(account);\n    return value;\n};\n\nexport const viewUserInfo = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewUserInfo(account);\n    return value;\n};\n\nexport const stakeActions = ()=>{\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiDepositToMining(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiDepositToMining(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiWithdrawLatestSToken(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiWithdrawLatestSToken(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport const viewTotalMinedRewardFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalMinedRewardFrom(account);\n    return value;\n};\n\nexport const viewGetTotalRewardBalanceInPool = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewGetTotalRewardBalanceInPool(account);\n    return value;\n};\n\nexport const apiClaimAmountOfReward = async(account: string,amount: ethers.BigNumber,reCalculate :boolean ,signer: ethers.Signer)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,signer);\n    const gasLimit = await contract.apiClaimAmountOfReward(account,amount,reCalculate);\n    const tx = await contract.apiClaimAmountOfReward(account,amount,reCalculate, {\n        gasLimit: gasLimit.mul(120).div(100)\n    });\n    return logTransaction(tx, \"farmActions.apiClaimAmountOfReward()\", amount.toString());\n};","import { useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport { isWETH } from \"../utils\";\nimport { fetchLPTokenWithValue, fetchMyLPTokens, fetchMyPools } from \"../utils/fetch-utils\";\nimport useSDK from \"./useSDK\";\nimport { totalSupplyOfSToken,fetchTotalMinedRTokenInpool, fetchCurrentTotalStakedSTokenInpool,viewTotalRewardInPoolFrom} from \"../utils/api-utils\";\n\nexport interface HomeState {\n    totalMinedBTC:ethers.BigNumber;\n    totalStakedBTCST:ethers.BigNumber;\n    yourBTCInpool:ethers.BigNumber;\n    totalMiningPower:ethers.BigNumber;\n    \n    loadingTotalMined:boolean;\n    loadingTotalStaked:boolean;\n    loadingBTCInpool:boolean;\n    loadingTotalMiningPower:boolean;\n\n    loadingLPTokens: boolean;\n    loadingPools: boolean;\n    lpTokens?: LPTokenWithValue[];\n    pools?: LPTokenWithValue[];\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useHomeState = () => {\n    const { provider, signer, address, tokens } = useContext(EthersContext);\n    \n    const [lpTokens, setLPTokens] = useState<LPTokenWithValue[]>();\n    const [pools, setPools] = useState<LPTokenWithValue[]>();\n    const [loadingLPTokens, setLoadingLPTokens] = useState(true);\n    const [loadingPools, setLoadingPools] = useState(true);\n    \n    const { getPair } = useSDK();\n\n    const [loadingTotalMined,setLoadingTotalMined] = useState(true);\n    const [totalMinedBTC,setTotalMinedBTC] = useState<ethers.BigNumber>();\n    const [totalStakedBTCST,setTotalStakedBTCST] = useState<ethers.BigNumber>();\n    const [loadingTotalStaked,setLoadingTotalStaked] = useState(true);\n    const [yourBTCInpool,setYourBTCInpool] = useState<ethers.BigNumber>();\n    const [loadingBTCInpool,setloadingBTCInpool] = useState(true);\n    const [totalMiningPower,setTotalMiningPower] = useState<ethers.BigNumber>();\n    const [loadingTotalMiningPower,setLoadingTotalMiningPower] = useState(true);\n    \n\n    useEffect(() => {\n        setLPTokens(undefined);\n        setPools(undefined);\n        setLoadingLPTokens(true);\n        setLoadingPools(true);\n        setTotalMinedBTC(undefined);\n        setTotalStakedBTCST(undefined);\n        setYourBTCInpool(undefined);\n        setTotalMiningPower(undefined);\n\n        setLoadingTotalMined(true);\n        setLoadingTotalStaked(true);\n        setloadingBTCInpool(true);\n        setLoadingTotalMiningPower(true);\n    }, [address]);\n\n    //load total mined BTC in all\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            setLoadingTotalMined(true);\n            const fetched = await fetchTotalMinedRTokenInpool(provider);\n            try{\n                setTotalMinedBTC(await fetched);\n            }finally{\n                setLoadingTotalMined(false);\n            }\n        }\n    },[provider,signer]);\n    //load current total staked btcst\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setLoadingTotalStaked(true);\n            const fetched = await fetchCurrentTotalStakedSTokenInpool(provider);\n            try{\n                setTotalStakedBTCST(await fetched);\n            }finally{\n                setLoadingTotalStaked(false);\n            }\n        }\n    },[provider,signer]);\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setloadingBTCInpool(true);\n            const fetched = await viewTotalRewardInPoolFrom(await signer.getAddress(),provider);\n            try{\n                setYourBTCInpool(await fetched);\n            }finally{\n                setloadingBTCInpool(false);\n            }\n        }\n    },[provider,signer]);\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setLoadingTotalMiningPower(true);\n            const fetched = await totalSupplyOfSToken(provider);\n            try{\n                setTotalMiningPower(await fetched);\n            }finally{\n                setLoadingTotalMiningPower(false);\n            }\n        }\n    },[provider,signer]);\n\n\n    // Load Liquidity\n    // useAsyncEffect(async () => {\n    //     const weth = tokens.find(t => isWETH(t));\n    //     if (provider && signer && weth && tokens && tokens.length > 0) {\n    //         setLoadingLPTokens(true);\n    //         const wethPriceUSD = Fraction.parse(String(await sushiData.weth.price()));\n    //         const fetched = await fetchMyLPTokens(await signer.getAddress(), tokens, provider);\n    //         try {\n    //             setLPTokens(\n    //                 await Promise.all(\n    //                     fetched.map(lpToken => fetchLPTokenWithValue(lpToken, weth, wethPriceUSD, getPair, provider))\n    //                 )\n    //             );\n    //         } finally {\n    //             setLoadingLPTokens(false);\n    //         }\n    //     }\n    // }, [getPair, provider, signer, tokens]);\n\n    // Load Farming\n    // useAsyncEffect(async () => {\n    //     const weth = tokens.find(t => isWETH(t));\n    //     if (provider && signer && weth && tokens && tokens.length > 0 && lpTokens) {\n    //         setLoadingPools(true);\n    //         const wethPriceUSD = Fraction.parse(String(await sushiData.weth.price()));\n    //         const fetched = await fetchMyPools(await signer.getAddress(), tokens, provider);\n    //         try {\n    //             setPools(\n    //                 await Promise.all(\n    //                     fetched.map(lpToken => fetchLPTokenWithValue(lpToken, weth, wethPriceUSD, getPair, provider))\n    //                 )\n    //             );\n    //         } finally {\n    //             setLoadingPools(false);\n    //         }\n    //     }\n    // }, [getPair, provider, signer, tokens, lpTokens]);\n\n    return {\n        totalMinedBTC,\n        totalStakedBTCST,\n        yourBTCInpool,\n        totalMiningPower,\n        loadingTotalMined,\n\n        loadingLPTokens,\n        loadingPools,\n        tokens,\n        lpTokens,\n        pools\n    };\n};\n\nexport default useHomeState;\n","import React, { FC, useCallback, useContext, useMemo } from \"react\";\nimport { FlatList, Platform, TouchableHighlight, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport { ethers } from \"ethers\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport Loading from \"../components/Loading\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenAmount from \"../components/TokenAmount\";\nimport TokenLogo from \"../components/TokenLogo\";\nimport TokenName from \"../components/TokenName\";\nimport TokenPrice from \"../components/TokenPrice\";\nimport TokenSymbol from \"../components/TokenSymbol\";\nimport TokenValue from \"../components/TokenValue\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useHomeState, { HomeState } from \"../hooks/useHomeState\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { formatUSD,formatBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\ninterface TokenItemProps {\n    token: TokenWithValue;\n    disabled?: boolean;\n}\n\ninterface LPTokenItemProps {\n    token: LPTokenWithValue;\n    disabled?: boolean;\n}\n\nconst SHTHomeScreen = () => {\n    const t = useTranslation();\n    const state = useHomeState();\n    const { loadingTokens } = useContext(EthersContext);\n    const loading = state.loadingTotalMined;\n    const totalValue = state.totalMinedBTC;\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content style={{ paddingBottom: Spacing.huge }}>\n                    <Title text={t(\"total-mined\")} style={{ flex: 1 }} />\n                    <Title\n                        text={loading ||totalValue==undefined ? t(\"fetching\") : formatBalance(totalValue)}\n                        fontWeight={\"light\"}\n                        disabled={loading}\n                        style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n                    />\n                    <Home state={state} />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n        </Screen>\n    );\n};\n\nconst Home = ({ state }: { state: HomeState }) => {\n    return (\n        <View style={{ marginTop: IS_DESKTOP ? Spacing.large : Spacing.normal }}>\n            <TotalStaked state={state} />\n            <View style={{ height: Spacing.large }} />\n            <YourBalance state={state} />\n            <View style={{ height: Spacing.large }} />\n            <TotalMiningPower state={state} />\n        </View>\n    );\n};\n\nconst TotalStaked = ({ state }: { state: HomeState }) => {\n    const t = useTranslation();\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const goToSwap = useLinker(\"/staking\", \"Stake\");\n    const staked = state.totalStakedBTCST;\n    const loading = state.loadingTotalStaked;\n    return (\n        <View>\n            <Heading text={t(\"total-staked-btcst\")} buttonText={t(\"stake\")} onPressButton={goToSwap} />\n            <Title\n                        text={loading ||staked==undefined ? t(\"fetching\") : formatBalance(staked)}\n                        fontWeight={\"light\"}\n                        disabled={loading}\n                        style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n                    />\n        </View>\n    );\n};\n\nconst TotalMiningPower = ({ state }: { state: HomeState }) => {\n    const t = useTranslation();\n\n    const power = state.totalMiningPower!=undefined?\n            state.totalMiningPower.div(ethers.BigNumber.from(10)):undefined;\n    return (\n        <View>\n            <Heading text={t(\"total-mining-power\")} />\n            {/* @ts-ignore */}\n            <LoadingNumber loading={state.loadingTotalMiningPower} \n                number={power} suffix={\" TH/s\"}/>\n        </View>\n    );\n};\n\nconst YourBalance = ({ state }: { state: HomeState }) => {\n    const t = useTranslation();\n    const goToFarming = useLinker(\"/claim\", \"Mining\");\n    return (\n        <View>\n            <Heading text={t(\"your-btc-balance-inpool\")} buttonText={t(\"claim\")} onPressButton={goToFarming} />\n            {/* @ts-ignore */}\n            <LoadingNumber loading={state.loadingBTCInpool} number={state.yourBTCInpool} />\n        </View>\n    );\n};\n\nconst LoadingNumber = (props:{\n    loading:boolean;\n    number:ethers.BigNumber;\n    suffix:string;\n})=>{\n    // const text = formatBalance(props.number)+\"\"+props.suffix;\n    const suffix = props.suffix?props.suffix:\"\";\n    return (props.loading || props.number==undefined) ?(\n        <Loading />\n    ):(\n        <Title text={formatBalance(props.number)+\"\"+suffix} fontWeight={\"light\"} disabled={props.loading}\n            style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n        />\n    );\n}\n\nconst ExternalIcon = ({ path }) => {\n    const { textDark, disabled } = useColors();\n    const onPress = () => window.open(\"https://www.1-b.tc/\" + path.toLowerCase(), \"_blank\");\n    const isETH = path.endsWith(ethers.constants.AddressZero);\n    return (\n        <TouchableHighlight onPress={onPress} disabled={isETH}>\n            <Icon\n                type={\"evilicon\"}\n                name={\"external-link\"}\n                color={isETH ? disabled : textDark}\n                style={{ marginLeft: Spacing.tiny }}\n            />\n        </TouchableHighlight>\n    );\n};\n\nconst sum = tokens => (tokens ? tokens.reduce((previous, current) => previous + (current.valueUSD || 0), 0) : 0);\n\nexport default SHTHomeScreen;\n"],"sourceRoot":""}