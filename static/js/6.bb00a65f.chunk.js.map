{"version":3,"sources":["assets/flags/us.png","assets/flags/cn.png","assets/flags/kr.png","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","src/components/Heading.tsx","src/components/Border.tsx","src/utils/api-utils.ts","src/components/ErrorMessage.tsx","src/components/InfoBox.tsx","src/components/AmountMeta.tsx","src/components/FetchingButton.tsx","src/components/InsufficientBalanceButton.tsx","src/components/Notice.tsx","src/components/Input.tsx","src/components/TokenInput.tsx","src/hooks/useSTClaimState.tsx","src/screens/SHTClaimScreen.tsx"],"names":["module","exports","Column","props","View","style","width","marginTop","noTopMargin","Platform","OS","Spacing","large","normal","SocialIcon","darkMode","useContext","GlobalContext","useColors","background","textLight","light","iconColor","undefined","backgroundColor","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onPressDiscord","onPressHome","FlexView","justifyContent","type","onPress","name","raised","reverse","color","reverseColor","containerStyle","flags","us","require","cn","kr","Flag","locale","history","useHistory","location","useLocation","TouchableHighlight","push","pathname","marginHorizontal","Image","source","height","WebFooter","padding","alignItems","Text","note","tiny","Constants","manifest","version","small","Heading","accent","marginBottom","disabled","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","text","buttonText","size","title","onPressButton","buttonStyle","paddingHorizontal","Border","border","fetchTotalMinedRTokenInpool","provider","a","async","contract","getContract","BTCSTFarm","viewAllTimeTotalMined","value","fetchCurrentTotalStakedSTokenInpool","BTCST","balanceOf","console","log","totalSupplyOfSToken","totalSupply","getFreeToTransferAmount","account","viewUserInfo","stakeActions","enter","useCallback","amount","signer","farm","estimateGas","apiDepositToMining","gasLimit","toString","mul","div","tx","logTransaction","leave","apiWithdrawLatestSToken","viewTotalMinedRewardFrom","viewGetTotalRewardBalanceInPool","apiClaimAmountOfReward","reCalculate","ErrorMessage","error","code","message","InfoBox","backgroundLight","borderDark","useStyles","AmountMeta","t","useTranslation","textDark","placeholder","suffix","FetchingButton","InsufficientBalanceButton","symbol","Notice","borderStyle","clear","titleStyle","paddingVertical","alignSelf","Input","textMedium","onChangeText","onError","errors","forbidden","forEach","validation","match","regexp","allowed","length","join","inputStyle","fontFamily","minHeight","outline","labelStyle","placeholderTextColor","errorStyle","MaxButton","onPressMax","token","balance","isETH","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","Button","maxButtonText","TokenInput","onAmountChanged","parseBalance","e","endsWith","indexOf","label","keyboardType","autoFocus","inputContainerStyle","borderBottomWidth","paddingTop","hideMaxButton","useSTClaimState","EthersContext","address","getTokenAllowance","tokens","updateTokens","useState","setAmount","rtoken","setRToken","loading","setloading","rtokenAllowed","setRTokenAllowed","yourTotalRToken","setYourTotalRToken","yourRTokenInpool","setYourRTokenInpool","entering","setEntering","txHappend","setTxHappend","useEffect","useAsyncEffect","rtokenContract","BBTC","BigNumber","from","rt","logoURI","getAddress","totalRewardBalInpool","allTimeMined","gte","onClaim","parsed","wait","Staking","state","isZero","RTokenBalance","AmountInput","ClaimInfo","isEmptyValue","willGet","Controls","setError","ClaimButton","SHTClaimScreen","Screen","Container","BackgroundImage","Content","Title"],"mappings":"0EAAAA,EAAOC,QAAU,IAA0B,gC,qBCA3CD,EAAOC,QAAU,IAA0B,gC,qBCA3CD,EAAOC,QAAU,IAA0B,gC,uICuB5BC,EAbiB,SAAAC,GAAK,OACjC,kBAACC,EAAA,EAAD,OACQD,EADR,CAEIE,MAAO,CACH,CACIC,MAAO,OACPC,UAAWJ,EAAMK,YAAc,EAAoB,QAAhBC,IAASC,GAAeC,IAAQC,MAAQD,IAAQE,QAEvFV,EAAME,W,iCCoBZS,EAAa,SAACX,GAA4B,IACpCY,EAAaC,qBAAWC,KAAxBF,SADmC,EAETG,cAA1BC,EAFmC,EAEnCA,WAAYC,EAFuB,EAEvBA,UACpB,OACI,kBAAC,IAAD,OACQjB,EADR,CAEIkB,OAAQN,EACRO,UAAWP,EAAW,aAAUQ,EAChClB,MAAO,CACHmB,gBAAiBL,EACjBM,YAAa,EACbC,YAAaX,EAAW,QAAUK,OAMnCO,EA/CK,WAAO,IACfZ,EAAaC,qBAAWC,KAAxBF,SADc,EAEYG,cAA1BC,EAFc,EAEdA,WAAYC,EAFE,EAEFA,UACdQ,EAAiBC,YAAU,uCAAwC,GAAI,UACvEC,EAAgBD,YAAU,6CAA8C,GAAI,UAC5EE,EAAiBF,YAAU,sCAAuC,GAAI,UACtEG,EAAcH,YAAU,qBAAsB,GAAI,UACxD,OACI,kBAACI,EAAA,EAAD,CAAU5B,MAAO,CAAEC,MAAO,OAAQ4B,eAAgB,WAC9C,kBAAC,EAAD,CAAYC,KAAK,aAAaC,QAASN,IACvC,kBAAC,EAAD,CAAYK,KAAK,UAAUC,QAASR,IACpC,kBAAC,EAAD,CAAYO,KAAK,YAAYC,QAASJ,IACtC,kBAAC,IAAD,CACIG,KAAM,qBACNE,KAAM,UACNC,QAAQ,EACRC,SAAS,EACTC,MAAOrB,EACPsB,aAAc1B,EAAW,QAAU,UACnCV,MAAO,CAAEmB,gBAAiBL,GAC1BuB,eAAgB,CACZjB,YAAa,EACbC,YAAaX,EAAW,QAAUK,GAEtCgB,QAASL,M,QCnBnBY,EAAQ,CACVC,GAAIC,EAAQ,MACZC,GAAID,EAAQ,MACZE,GAAIF,EAAQ,OAgCVG,EAAO,SAAC,GAAsB,IAApBX,EAAmB,EAAnBA,KAAMY,EAAa,EAAbA,OACZC,EAAUC,cACVC,EAAWC,cAIjB,OACI,kBAACC,EAAA,EAAD,CAAoBlB,QAJR,WACZc,EAAQK,KAAKH,EAASI,SAAW,WAAaP,IAGR5C,MAAO,CAAEoD,iBAAkB,IAC7D,kBAACC,EAAA,EAAD,CAAOC,OAAQhB,EAAMN,GAAOhC,MAAO,CAAEC,MAAO,GAAIsD,OAAQ,QAKrDC,IA1CG,WACShC,YACnB,yCACA,GACA,UAEJ,OACI,kBAAC,EAAD,CAAQrB,aAAa,GACjB,kBAACJ,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,OAAQwD,QAASnD,IAAQE,OAAQkD,WAAY,WAC/D,kBAAC,EAAD,MAOA,kBAACC,EAAA,EAAD,CAAMC,MAAM,EAAM5D,MAAO,CAAEE,UAAWI,IAAQuD,OAA9C,iDACyCC,IAAUC,SAASC,QAD5D,KAGA,kBAACpC,EAAA,EAAD,CAAU5B,MAAO,CAAEE,UAAWI,IAAQ2D,QAClC,kBAAC,EAAD,CAAMjC,KAAM,KAAMY,OAAQ,OAC1B,kBAAC,EAAD,CAAMZ,KAAM,KAAMY,OAAQ,Y,kCCxC9C,8DA2CesB,IAzBmB,SAAApE,GAAU,IAChCqE,EAAWtD,cAAXsD,OACR,OACI,kBAAC,IAAD,CAAUnE,MAAO,CAAE0D,WAAY,WAAYH,OAAQ,GAAIa,aAActE,EAAMuE,SAAW,EAAI/D,IAAQ2D,QAC9F,kBAAC,IAAD,CACIK,QAAQ,EACRC,WAAYzE,EAAMyE,YAAc,OAChCF,SAAUvE,EAAMuE,SAChBrE,MAAO,CAAC,CAAEwE,KAAM,EAAGC,SAAUC,IAAa,GAAK,GAAIC,cAAerE,IAAQuD,MAAQ/D,EAAME,QACvFF,EAAM8E,MAEV9E,EAAM+E,YACH,kBAAC,IAAD,CACI/C,KAAM,QACNgD,KAAM,QACNC,MAAOjF,EAAM+E,WACb9C,QAASjC,EAAMkF,cACf7C,MAAOgC,EACPc,YAAa,CAAEC,kBAAmB5E,IAAQuD,W,kCCpC9D,2CAqBesB,IAfA,SAAArF,GAAU,IACbsF,EAAWvE,cAAXuE,OACR,OACI,kBAAC,IAAD,CACIpF,MAAO,CACHuD,OAAQ,EACRtD,MAAO,OACPkB,gBAAiBiE,EACjBlF,UAAWJ,EAAMmE,MAAQ3D,IAAQuD,KAAOvD,IAAQ2D,MAChDG,aAActE,EAAMmE,MAAQ3D,IAAQuD,KAAOvD,IAAQ2D,MAAQ3D,IAAQuD,U,wYCWtEwB,EAA8B,SAAOC,GAAP,iBAAAC,EAAAC,OAAA,uDACjCC,EAAWC,YAAY,cAAcC,IAAUL,GADd,WAAAC,EAAA,MAEnBE,EAASG,yBAFU,cAEjCC,EAFiC,yBAGhCA,GAHgC,6DAM9BC,EAAsC,SAAOR,GAAP,iBAAAC,EAAAC,OAAA,uDACzCC,EAAWC,YAAY,SAASK,IAAMT,GADG,WAAAC,EAAA,MAE3BE,EAASO,UAAUL,MAFQ,cAEzCE,EAFyC,OAG/CI,QAAQC,IAAI,uCACZD,QAAQC,IAAIL,GAJmC,kBAKxCA,GALwC,6DActCM,EAAsB,SAAMb,GAAN,iBAAAC,EAAAC,OAAA,uDACzBC,EAAWC,YAAY,SAASK,IAAMT,GADb,WAAAC,EAAA,MAEXE,EAASW,eAFE,cAEzBP,EAFyB,yBAGxBA,GAHwB,6DAYtBQ,EAA0B,SAAMC,EAAgBhB,GAAtB,iBAAAC,EAAAC,OAAA,uDAC7BC,EAAWC,YAAY,eAAeK,IAAMT,GADf,WAAAC,EAAA,MAEfE,EAASY,wBAAwBC,IAFlB,cAE7BT,EAF6B,yBAG5BA,GAH4B,6DAM1BU,EAAe,SAAMD,EAAgBhB,GAAtB,iBAAAC,EAAAC,OAAA,uDAClBC,EAAWC,YAAY,cAAcC,IAAUL,GAD7B,WAAAC,EAAA,MAEJE,EAASc,aAAaD,IAFlB,cAElBT,EAFkB,yBAGjBA,GAHiB,6DAMfW,EAAe,WAuBxB,MAAO,CACHC,MAvBUC,uBAAY,SAAOC,EAA0BC,GAAjC,mBAAArB,EAAAC,OAAA,uDAChBqB,EAAOnB,YAAY,cAAeC,IAAWiB,GACnDX,QAAQC,IAAI,oBAAoBS,GAFV,WAAApB,EAAA,MAGCsB,EAAKC,YAAYC,mBAAmBJ,IAHrC,cAGhBK,EAHgB,YAItBf,QAJsB,WAAAV,EAAA,MAIJyB,EAASC,YAJL,oCAIgB,aAJhB,KAIdf,IAJc,4BAAAX,EAAA,MAKLsB,EAAKE,mBAAmBJ,EAAQ,CAC7CK,SAAUA,EAASE,IAAI,KAAKC,IAAI,QANd,eAKhBC,EALgB,yBAQfC,YAAeD,EAAI,uBAAwBT,EAAOM,aARnC,+DASvB,IAeCK,MAbUZ,uBAAY,SAAOC,EAA0BC,GAAjC,mBAAArB,EAAAC,OAAA,uDAChBqB,EAAOnB,YAAY,cAAeC,IAAWiB,GACnDX,QAAQC,IAAI,oBAAoBS,GAFV,WAAApB,EAAA,MAGCsB,EAAKC,YAAYS,wBAAwBZ,IAH1C,cAGhBK,EAHgB,YAItBf,QAJsB,WAAAV,EAAA,MAIJyB,EAASC,YAJL,oCAIgB,aAJhB,KAIdf,IAJc,4BAAAX,EAAA,MAKLsB,EAAKU,wBAAwBZ,EAAQ,CAClDK,SAAUA,EAASE,IAAI,KAAKC,IAAI,QANd,eAKhBC,EALgB,yBAQfC,YAAeD,EAAI,uBAAwBT,EAAOM,aARnC,+DASvB,MAQMO,EAA2B,SAAMlB,EAAgBhB,GAAtB,iBAAAC,EAAAC,OAAA,uDAC9BC,EAAWC,YAAY,cAAcC,IAAUL,GADjB,WAAAC,EAAA,MAEhBE,EAAS+B,yBAAyBlB,IAFlB,cAE9BT,EAF8B,yBAG7BA,GAH6B,6DAM3B4B,EAAkC,SAAMnB,EAAgBhB,GAAtB,iBAAAC,EAAAC,OAAA,uDACrCC,EAAWC,YAAY,cAAcC,IAAUL,GADV,WAAAC,EAAA,MAEvBE,EAASgC,gCAAgCnB,IAFlB,cAErCT,EAFqC,yBAGpCA,GAHoC,6DAMlC6B,EAAyB,SAAMpB,EAAgBK,EAAyBgB,EAAsBf,GAArE,mBAAArB,EAAAC,OAAA,uDAC5BC,EAAWC,YAAY,cAAcC,IAAUiB,GADnB,WAAArB,EAAA,MAEXE,EAASqB,YAAYY,uBAAuBpB,EAAQK,EAAOgB,IAFhD,cAE5BX,EAF4B,kBAAAzB,EAAA,MAGjBE,EAASiC,uBAAuBpB,EAAQK,EAAOgB,EAAa,CACzEX,SAAUA,EAASE,IAAI,KAAKC,IAAI,QAJF,cAG5BC,EAH4B,yBAM3BC,YAAeD,EAAI,uCAAwCT,EAAOM,aANvC,8D,kCC/GtC,2CA2BeW,IApBM,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACjB,kBAAC,IAAD,CACI7H,MAAO,CACHqB,YAAa,MACbD,YAAa,EACbnB,MAAO,OACPwD,QAASnD,IAAQuD,KACjB3D,UAAWI,IAAQ2D,QAEtB4D,EAAMC,MACH,kBAAC,IAAD,CAAMvD,WAAY,OAAQvE,MAAO,CAAEmC,MAAO,MAAOsC,SAAU,KAA3D,cACgBoD,EAAMC,MAG1B,kBAAC,IAAD,CAAMlE,MAAM,EAAM5D,MAAO,CAAEmC,MAAO,MAAOsC,SAAU,KAC9CoD,EAAME,Y,gsBCMJC,IApBC,SAAClI,GAAyC,IAC9CY,EAAaC,qBAAWC,KAAxBF,SAD6C,EAEbG,cAAhCoH,EAF6C,EAE7CA,gBAAiBC,EAF4B,EAE5BA,WACjB9C,EAAW+C,cAAX/C,OACR,OACI,kBAAC,IAAD,OACQtF,EADR,CAEIE,MAAO,CAAC,EAAD,KAEIoF,EAAO,CAAEjD,MAAOzB,EAAWwH,EAAaD,KAF5C,IAGC9G,gBAAiB8G,EACjB/H,UAAWI,IAAQE,OAASF,IAAQ2D,MACpCR,QAASnD,IAAQ2D,MAAQ3D,IAAQuD,OAErC/D,EAAME,Y,kCCtBtB,oDA4BeoI,IAfyB,SAAAtI,GACpC,IAAMuI,EAAIC,cADmC,EAEAzH,cAArC0H,EAFqC,EAErCA,SAAUxH,EAF2B,EAE3BA,UAAWyH,EAFgB,EAEhBA,YAC7B,OACI,kBAAC,IAAD,CACIxI,MAAO,CACHyE,SAAUC,IAAa,GAAK,GAC5BN,aAAc9D,IAAQE,OACtB2B,MAAOrC,EAAMuE,SAAWmE,EAAc1I,EAAM6G,OAAS4B,EAAWxH,IAEnEjB,EAAMuE,SAAWgE,EAAE,OAASvI,EAAM6G,OAAS7G,EAAM6G,OAAS,KAAO7G,EAAM2I,QAAU,IAAMJ,EAAE,e,kCCvBtG,qCASeK,IAJQ,WACnB,IAAML,EAAIC,cACV,OAAO,kBAAC,IAAD,CAAQvD,MAAOsD,EAAE,YAAahE,UAAU,M,kCCPnD,qCASesE,IAJmB,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,OAC3BP,EAAIC,cACV,OAAO,kBAAC,IAAD,CAAQvD,MAAO6D,EAASP,EAAE,gBAAiB,CAAEO,WAAYP,EAAE,wBAAyBhE,UAAU,M,kCCPzG,qEA4CewE,IA1BA,SAAC/I,GAAwB,IAC5BiB,EAAcF,cAAdE,UAEF+H,GAAc1D,EADD+C,cAAX/C,QACmB,CAAEjD,MAAOrC,EAAMqC,QACpCA,EAAQrC,EAAMqC,OAASpB,EAC7B,OACI,kBAAC,IAAD,CAAMf,MAAO,CAACF,EAAMiJ,MAAQ,GAAKD,EAAahJ,EAAME,QAChD,kBAAC,IAAD,CAAM4D,MAAM,EAAM5D,MAAO,CAAEmC,UACtBrC,EAAM8E,MAEV9E,EAAM+E,YAAc/E,EAAMkF,eACvB,kBAAC,IAAD,CACID,MAAOjF,EAAM+E,WACb/C,KAAM,QACNgD,KAAM,QACNP,WAAY,OACZxC,QAASjC,EAAMkF,cACfgE,WAAY,CAAE7G,SACd8C,YAAa,CAAEC,kBAAmB,EAAG+D,gBAAiB,GACtDjJ,MAAO,CAAEkJ,UAAW,WAAYhJ,UAAWI,IAAQuD,W,0KC+BxDsF,EAhDe,SAAArJ,GAAU,IAAD,EACSe,cAApC0H,EAD2B,EAC3BA,SAAUa,EADiB,EACjBA,WAAYrI,EADK,EACLA,UACxB+D,EAAOhF,EAAMgF,MAAQ,SACrB3C,EAAQrC,EAAMqC,OAASoG,EACvB9D,EAAoB,UAATK,EAAmB,GAAc,UAATA,EAAmB,GAAK,GAC3DuE,EAAe3C,uBACjB,SAAC9B,GACG,MAAA9E,EAAMuJ,cAANvJ,EAAMuJ,aAAezE,GACrB,MAAA9E,EAAMwJ,SAANxJ,EAAMwJ,QAAU,IAChB,IAAMC,EAAS,GACF,KAAT3E,GAAe9E,EAAM0J,WACrB1J,EAAM0J,UAAUC,SAAQ,SAAAC,GAChB9E,EAAK+E,MAAMD,EAAWE,SACtBL,EAAOrG,KAAKwG,EAAW7B,UAItB,KAATjD,GAAe9E,EAAM+J,SACrB/J,EAAM+J,QAAQJ,SAAQ,SAAAC,GACb9E,EAAK+E,MAAMD,EAAWE,SACvBL,EAAOrG,KAAKwG,EAAW7B,UAI/B0B,EAAOO,OAAS,IAChB,MAAAhK,EAAMwJ,SAANxJ,EAAMwJ,QAAUC,EAAOQ,KAAK,UAGpC,CAACjK,EAAMuJ,aAAcvJ,EAAMwJ,QAASxJ,EAAM0J,UAAW1J,EAAM+J,UAE/D,OACI,kBAAC,IAAD,OACQ/J,EADR,CAEIkK,WAAY,CACR,CAAEvF,WAAUwF,WAAY,UAAWtF,cAAe,EAAGxC,QAAOjC,UAAW,EAAGgK,UAAW,IAErE,QAAhB9J,IAASC,GAAe,CAAE8J,QAAS,QAAW,GAC9CrK,EAAMkK,YAEVI,WAAY,CAAC,CAAEjI,MAAOiH,GAActJ,EAAMsK,YAC1CC,qBAAsBvK,EAAMuK,sBAAwBtJ,EACpDuJ,WAAYxK,EAAMwJ,QAAU,CAAE/F,OAAQ,GAAMzD,EAAMwK,WAClDjI,eAAgB,CAAC,CAAE6C,kBAAmB,GAAKpF,EAAMuC,gBACjDgH,aAAcA,M,ikBCtC1B,IAkDMkB,EAAY,SAACzK,GAAmE,IAC1EqE,EAAWtD,cAAXsD,OACFqG,EAAa9D,uBAAY,WAC3B,GAAI5G,EAAM2K,MAAO,CACb,IAAIC,EAAU5K,EAAM2K,MAAMC,QAC1B,GAAIC,YAAM7K,EAAM2K,OAAQ,CAEpB,IAAMG,EAAMC,YAAM,IAClBH,EAAUA,EAAQI,GAAGF,GAAOF,EAAQK,IAAIH,GAAOI,SAAOC,UAAUC,KAEpEpL,EAAMqL,aAAaC,YAAcV,EAAS5K,EAAM2K,MAAMY,cAE3D,CAACvL,EAAM2K,MAAO3K,EAAMqL,eACvB,OACI,kBAACpL,EAAA,EAAD,CAAMC,MAAO,CAAEsL,SAAU,WAAYC,MAAO,GAAIC,OAAwB,QAAhBpL,IAASC,GAAe,GAAK,KACjF,kBAACoL,EAAA,EAAD,CACI3J,KAAM,QACNgD,KAAM,QACN3C,MAAOgC,EACPY,MAAOjF,EAAM4L,gBAAkBhH,IAAa,OAAS5E,EAAM2K,MAAM7B,OAAS,OAC1ErE,WAAY,OACZxC,QAASyI,EACTvF,YAAa,CAAEC,kBAAmB5E,IAAQuD,UAM3C8H,IA9EyB,SAAA7L,GAAU,IAAD,IACrCsF,EAAW+C,cAAX/C,OACFiE,EAAe3C,uBACjB,SAAC9B,GACG,GAAI9E,EAAM2K,OAAS3K,EAAM8L,gBACrB,IACIC,YAAajH,EAAM9E,EAAM2K,MAAMY,UAC/BvL,EAAM8L,gBAAgBhH,GACxB,MAAOkH,GACDlH,EAAKmH,SAAS,MAAQnH,EAAKoH,QAAQ,OAASpH,EAAKkF,OAAS,GAC1DhK,EAAM8L,gBAAgBhH,MAKtC,CAAC9E,EAAM2K,MAAO3K,EAAM8L,kBAExB,OACI,kBAAC7L,EAAA,EAAD,KACKD,EAAMiF,OAAS,kBAACb,EAAA,EAAD,CAASU,KAAM9E,EAAMiF,QACrC,kBAAChF,EAAA,EAAD,KACI,kBAAC,EAAD,CACIkM,MAAOnM,EAAMmM,MACbpG,MAAO/F,EAAM6G,OACb0C,aAAcA,EACdb,YAAa,MACb0D,aAAc,UACdC,UAAWrM,EAAMqM,YAAa,EAC9BnC,WAAY,CAAE5G,iBAAkB9C,IAAQuD,MACxCuI,oBAAqB,CAAEC,kBAAmB,GAC1CjC,WAAY,CAAEH,WAAY,QAAS1G,OAAQzD,EAAMmM,MAAQ,OAAS,GAClE5J,eAAc,OACP+C,KADO,IAEVF,kBAAmB5E,IAAQuD,KAC3ByI,WAAY,GACZ3H,cAAe,OAGtB,SAAA7E,EAAM2K,QAAN,WAAaC,cAAb,IAAsBI,GAAG,MAAOhL,EAAMyM,eACnC,kBAAC,EAAD,CACI9B,MAAO3K,EAAM2K,MACbiB,cAAe5L,EAAM4L,cACrBP,aAAcrL,EAAM8L,sB,mVC0D7BY,EA1FS,WAAO,IAAD,EACoD7L,qBAAW8L,KAAjFnH,EADkB,EAClBA,SAASsB,EADS,EACTA,OAAQ8F,EADC,EACDA,QADC,KACQC,kBADR,EAC2BC,OAD3B,EACmCC,aAEjCC,mBAAS,KAHX,WAGnBnG,EAHmB,KAGXoG,EAHW,OAIDvG,cAJC,KAIlBC,MAJkB,EAIXa,MACYwF,sBALD,WAKnBE,EALmB,KAKZC,EALY,OAMGH,oBAAS,GANZ,WAMnBI,EANmB,KAMXC,EANW,OAOgBL,oBAAS,GAPzB,WAOnBM,EAPmB,KAOJC,EAPI,OASmBP,qBATnB,WASnBQ,EATmB,KASHC,EATG,OAUqBT,qBAVrB,WAUnBU,EAVmB,KAUFC,EAVE,OAWMX,oBAAS,GAXf,WAWnBY,EAXmB,KAWTC,EAXS,OAaOb,mBAAiB,GAbxB,WAanBc,EAbmB,KAaTC,EAbS,KAe1BC,qBAAU,WACNf,EAAU,IACVE,OAAU/L,GACViM,GAAW,GACXI,OAAmBrM,GACnB2M,EAAa,KACd,CAACnB,IACJqB,KAAe,4BAAAxI,EAAAC,OAAA,oDACPF,IAAYsB,EADL,iCAGGoH,EAAiBtI,YAAY,QAASuI,IAAMrH,GAH/C,WAAArB,EAAA,MAKayI,EAAehM,QAL5B,+BAMSiM,IANT,WAAA1I,EAAA,MAOiByI,EAAe3C,YAPhC,sCAAA9F,EAAA,MAQcyI,EAAepF,UAR7B,gCAUSoC,SAAOkD,UAAUC,KAAK,GAN5BC,EAJH,CAKCpM,KALD,KAMC0K,QAND,KAOCrB,SAPD,KAQCzC,OARD,KASCyF,QAAQ,GACR3D,QAVD,WAYHuC,EAZG,YAAA1H,EAAA,MAYa6I,GAZb,gJAiBb,CAAC9I,EAASsB,IAEZmH,KAAe,4BAAAxI,EAAAC,OAAA,qDACPF,GAAYsB,GAAUoG,GADf,wBAEPK,GAAiB,GACjBF,GAAW,GAHJ,gBAAA5H,EAAA,KAKgCkC,IALhC,WAAAlC,EAAA,MAKsEqB,EAAO0H,cAL7E,+BAK0FhJ,EAL1F,6EAKGiJ,EALH,cAAAhJ,EAAA,KAMwBiC,IANxB,YAAAjC,EAAA,MAMuDqB,EAAO0H,cAN9D,gCAM2EhJ,EAN3E,6EAMGkJ,EANH,OAOHnB,EAAiBrC,SAAOkD,UAAUC,KAAKI,GAAsBE,IAAIP,YAAUC,KAAK,KAP7E,MAQHV,EARG,YAAAlI,EAAA,MAQuBgJ,GARvB,mDASHhB,EATG,YAAAhI,EAAA,MASsBiJ,GATtB,+DAWHrB,GAAW,GAXR,oFAcb,CAAC7H,EAASsB,EAAOoG,EAAOY,IAC1B,IAAMc,EAAUhI,uBAAY,4BAAAnB,EAAAC,OAAA,qDACpBF,GAAYqB,GAAUqG,GAAUpG,GADZ,wBAEpB+G,GAAY,GAFQ,SAIVgB,EAAS9C,YAAalF,EAAQqG,EAAO3B,UAJ3B,OAAA9F,EAAA,KAKCmC,IALD,WAAAnC,EAAA,MAK8BqB,EAAO0H,cALrC,+BAKkDK,EALlD,KAK8D/H,EAL9D,yBAKyD,EALzD,wDAKVQ,EALU,4CAAA7B,EAAA,MAON6B,EAAGwH,QAPG,QASZ7B,EAAU,IAEVc,EADYD,EAAU,GAVV,yBAchBD,GAAY,GAdI,oFAiBzB,CAACrI,EAASqB,EAAQqG,EAAQpG,IAE7B,MAAO,CACHsG,UACAvG,SACAoG,YACAC,SACAM,kBACAE,mBACAJ,gBACAC,mBACAqB,UACAhB,WACAE,c,yBCtEFiB,EAAU,WAAO,IAAD,EACZxG,EAAIC,cACJwG,EAAQtC,IACd,OACI,kBAACzM,EAAA,EAAD,CAAMC,MAAO,CAAEE,UAAWI,IAAQC,QAC9B,kBAAC,EAAD,CAAeuO,MAAOA,IACtB,kBAAC3J,EAAA,EAAD,MACA,kBAAC,EAAD,CAAa2J,MAAOA,IACnBA,EAAM9B,SAAN,SAAgB8B,EAAMtB,uBAAtB,EAAgB,EAAwBuB,WACrC,kBAAClG,EAAA,EAAD,CAAQjE,KAAMyD,EAAE,8BAA+BlG,MAAO,SAAUnC,MAAO,CAAEE,UAAWI,IAAQ2D,SAEhG,kBAAC,EAAD,CAAW6K,MAAOA,MAKxBE,EAAgB,SAAC,GAAsC,IAApCF,EAAmC,EAAnCA,MACfzG,EAAIC,cACH4E,EAAiE4B,EAAjE5B,QAAQI,EAAyDwB,EAAzDxB,gBAAgBE,EAAyCsB,EAAzCtB,iBAA+BR,GAAU8B,EAAxB1B,cAAwB0B,EAAV9B,QAFN,EAGXnM,cAArC0H,EAHgD,EAGhDA,SAAUxH,EAHsC,EAGtCA,UAHsC,EAG3ByH,YAC7B,OACI,kBAACzI,EAAA,EAAD,KACI,kBAACmE,EAAA,EAAD,CAASU,KAAMyD,EAAE,eAAe,KAAK2E,EAAQA,EAAOpE,OAAO,MAC3D,kBAACjF,EAAA,EAAD,CACI3D,MAAO,CACHyE,SAAUC,IAAa,GAAK,GAC5BN,aAAc9D,IAAQuD,KACtB1B,MAAO+K,EAASnM,EAAYwH,KAE/B2E,GAAY4B,EAAM9B,QAAWQ,EACzBnF,EAAE,YAAY,IACf+C,YAAcoC,EAAkBsB,EAAM9B,OAAO3B,UAAU,IAAIyD,EAAM9B,OAAOpE,OACvE,IAAIP,EAAE,WAHqCA,EAAE,aAKtD,kBAAC1E,EAAA,EAAD,CACI3D,MAAO,CACHyE,SAAUC,IAAa,GAAK,GAC5BN,aAAc9D,IAAQuD,KACtB1B,MAAO+K,EAASnM,EAAYwH,KAE/B2E,GAAY4B,EAAM9B,QAAWM,EAC7BjF,EAAE,kBAAkB,IAAI+C,YAAckC,EAAiBwB,EAAM9B,OAAO3B,UADtB,MAQzD4D,EAAc,SAAC,GAAsC,IAApCH,EAAmC,EAAnCA,MACbzG,EAAIC,cACV,OAAKwG,EAAM9B,QAAU8B,EAAMtB,mBAAmBsB,EAAMtB,iBAAiBuB,SAIjE,kBAAChP,EAAA,EAAD,KACI,kBAACmE,EAAA,EAAD,CAASU,KAAMyD,EAAE,qBACjB,kBAACsD,EAAA,EAAD,CACIlB,MAAOqE,EAAM9B,OACbrG,OAAQmI,EAAMnI,OACdiF,gBAAiBkD,EAAM/B,UACvBZ,UAAWzH,OATZ,kBAACR,EAAA,EAAD,CAASU,KAAMyD,EAAE,mBAAoBhE,UAAU,KAgBxD6K,EAAY,SAAC,GAAsC,IAAD,IAAnCJ,EAAmC,EAAnCA,MAEXzK,GADIiE,eAELwG,EAAM9B,SAAW8B,EAAMtB,kBACxBsB,EAAMtB,iBAAiBuB,UACvBI,YAAaL,EAAMnI,SACnByI,EAAU/K,OAASnD,EAAU2K,YAAaiD,EAAMnI,OAAP,SAAemI,EAAM9B,aAArB,EAAe,EAAc3B,UAI1E,OAHI+D,GAAO,SAAIA,IAAA,EAAStE,GAAGgE,EAAMtB,oBAC7B4B,EAAUN,EAAMtB,kBAGhB,kBAACxF,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,CACIzB,OAAQyI,EAAUhE,YAAcgE,EAAQN,EAAM9B,OAAQ3B,UAAY,GAClE5C,OAAQqG,EAAM9B,OAAO8B,EAAM9B,OAAQpE,OAAO,GAC1CvE,SAAUA,IAEd,kBAAC,EAAD,CAAUyK,MAAOA,MAKvBO,EAAW,SAAC,GAAsC,IAApCP,EAAmC,EAAnCA,MAAmC,EACzBhC,mBAAwB,IADC,WAC5CjF,EAD4C,KACrCyH,EADqC,KAEnD,OACI,kBAACvP,EAAA,EAAD,CAAMC,MAAO,CAAEE,UAAWI,IAAQE,UAC5BsO,EAAM9B,SAAW8B,EAAMtB,kBAAmBsB,EAAMtB,iBAAiBuB,UAAYI,YAAaL,EAAMnI,QAC9F,kBAAC,EAAD,CAAamI,MAAOA,EAAOxF,QAASgG,EAAUjL,UAAU,IACxDwH,YAAaiD,EAAMnI,OAAQmI,EAAM9B,OAAO3B,UAAUP,GAAGgE,EAAMtB,kBAC3D,kBAAC7E,EAAA,EAAD,CAA2BC,OAAQkG,EAAM9B,OAAOpE,SAChDkG,EAAM5B,QACN,kBAACxE,EAAA,EAAD,MAEA,oCACI,kBAAC,EAAD,CAAaoG,MAAOA,EAAOxF,QAASgG,EAAUjL,UAAWyK,EAAM1B,iBAGtEvF,EAAME,SAA0B,OAAfF,EAAMC,MAAiB,kBAACF,EAAA,EAAD,CAAcC,MAAOA,MAKpE0H,EAAc,SAAC,GAQd,IAPHT,EAOE,EAPFA,MACAxF,EAME,EANFA,QACAjF,EAKE,EALFA,SAMMgE,EAAIC,cAUV,OAAO,kBAACmD,EAAA,EAAD,CAAQ1G,MAAOsD,EAAE,SAAU6E,QAAS4B,EAAMpB,SAAU3L,QAT3C,oBAAAwD,EAAAC,OAAA,uDACZ8D,EAAQ,IADI,oBAAA/D,EAAA,MAGFuJ,EAAMJ,WAHJ,OAIRI,EAAM/B,UAAU,IAJR,gDAMRzD,EAAQ,EAAD,IANC,iEAS6DjF,SAAUA,KAG5EmL,UArJQ,WACnB,IAAMnH,EAAIC,cACV,OACI,kBAACmH,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOjL,KAAMyD,EAAE,WACf,kBAAC1E,EAAA,EAAD,CAAM3C,OAAO,GAAOqH,EAAE,eACtB,kBAAC,EAAD,OAEa,QAAhBjI,IAASC,IAAgB,kBAACmD,EAAA,EAAD,OAE9B,kBAAC,IAAD","file":"static/js/6.bb00a65f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/us.d367121f.png\";","module.exports = __webpack_public_path__ + \"static/media/cn.baedda5d.png\";","module.exports = __webpack_public_path__ + \"static/media/kr.146730ea.png\";","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"https://twitter.com/standardhashrate\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/Standard-Hashrate-Group\", \"\", \"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.gg/standardhashrate\", \"\", \"_blank\");\n    const onPressHome = useLinker(\"https://www.1-b.tc\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <SocialIcon type=\"wordpress\" onPress={onPressHome} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport Column from \"../Column\";\nimport FlexView from \"../FlexView\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst flags = {\n    us: require(\"../../../assets/flags/us.png\"),\n    cn: require(\"../../../assets/flags/cn.png\"),\n    kr: require(\"../../../assets/flags/kr.png\")\n};\n\nconst WebFooter = () => {\n    const onPressAlchemy = useLinker(\n        \"https://dashboard.alchemyapi.io/signup\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ width: \"100%\", padding: Spacing.normal, alignItems: \"center\" }}>\n                <SocialIcons />\n                {/* <TouchableHighlight onPress={onPressAlchemy}>\n                    <Image\n                        source={require(\"../../../assets/alchemy.png\")}\n                        style={{ width: 188, height: 40, marginTop: Spacing.tiny }}\n                    />\n                </TouchableHighlight> */}\n                <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                    Built with ❤️ by StandardHashrate (v{Constants.manifest.version})\n                </Text>\n                <FlexView style={{ marginTop: Spacing.small }}>\n                    <Flag name={\"us\"} locale={\"en\"} />\n                    <Flag name={\"cn\"} locale={\"zh\"} />\n                    {/* <Flag name={\"kr\"} locale={\"ko\"} /> */}\n                </FlexView>\n            </View>\n        </Column>\n    );\n};\n\nconst Flag = ({ name, locale }) => {\n    const history = useHistory();\n    const location = useLocation();\n    const onPress = () => {\n        history.push(location.pathname + \"?locale=\" + locale);\n    };\n    return (\n        <TouchableHighlight onPress={onPress} style={{ marginHorizontal: 4 }}>\n            <Image source={flags[name]} style={{ width: 30, height: 20 }} />\n        </TouchableHighlight>\n    );\n};\n\nexport default WebFooter;\n","import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import { FACTORY_ADDRESS as SUSHISWAP_FACTORY, Pair } from \"@sushiswap/sdk\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport { FACTORY_ADDRESS as UNISWAP_FACTORY } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\n\nimport Fraction from \"../constants/Fraction\";\nimport { ETH } from \"../constants/tokens\";\nimport { ALCHEMY_PROVIDER } from \"../context/EthersContext\";\nimport { Order, OrderStatus } from \"../hooks/useSettlement\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { useCallback } from \"react\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nimport {\n    convertToken,\n    formatBalance,\n    getContract,\n    isETH,\n    isWETH,\n    parseBalance,\n    parseCurrencyAmount,\n    pow10\n} from \"./index\";\nexport const fetchTotalMinedRTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewAllTimeTotalMined();\n    return value;\n};\n\nexport const fetchCurrentTotalStakedSTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.balanceOf(BTCSTFarm);\n    console.log(\"fetchCurrentTotalStakedSTokenInpool\");\n    console.log(value);\n    return value;\n};\n\nexport const viewTotalRewardInPoolFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPoolFrom(account);\n    return value;\n    \n};\nexport const totalSupplyOfSToken = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.totalSupply();\n    return value;\n};\n\nexport const viewTotalRewardInPool = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPool();\n    return value;\n};\n\nexport const getFreeToTransferAmount = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"ISTokenERC20\",BTCST,provider);\n    const value = await contract.getFreeToTransferAmount(account);\n    return value;\n};\n\nexport const viewUserInfo = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewUserInfo(account);\n    return value;\n};\n\nexport const stakeActions = ()=>{\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiDepositToMining(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiDepositToMining(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiWithdrawLatestSToken(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiWithdrawLatestSToken(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport const viewTotalMinedRewardFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalMinedRewardFrom(account);\n    return value;\n};\n\nexport const viewGetTotalRewardBalanceInPool = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewGetTotalRewardBalanceInPool(account);\n    return value;\n};\n\nexport const apiClaimAmountOfReward = async(account: string,amount: ethers.BigNumber,reCalculate :boolean ,signer: ethers.Signer)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,signer);\n    const gasLimit = await contract.estimateGas.apiClaimAmountOfReward(account,amount,reCalculate);\n    const tx = await contract.apiClaimAmountOfReward(account,amount,reCalculate, {\n        gasLimit: gasLimit.mul(120).div(100)\n    });\n    return logTransaction(tx, \"farmActions.apiClaimAmountOfReward()\", amount.toString());\n};","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"fetching\")} disabled={true} />;\n};\nexport default FetchingButton;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    const t = useTranslation();\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isETH, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"numeric\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (isETH(props.token)) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n\nimport { BigNumber, ethers } from \"ethers\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport { isWETH } from \"../utils\";\nimport { fetchLPTokenWithValue, fetchMyLPTokens, fetchMyPools } from \"../utils/fetch-utils\";\nimport useSDK from \"./useSDK\";\nimport { apiClaimAmountOfReward,stakeActions,viewTotalMinedRewardFrom,viewGetTotalRewardBalanceInPool} from \"../utils/api-utils\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { getContract, parseBalance } from \"../utils\";\n\nexport interface ClaimState {\n    loading:boolean;\n    rtoken?: Token;\n    \n    amount: string;\n    setAmount: (amount: string) => void;\n\n    yourTotalRToken:ethers.BigNumber;\n    yourRTokenInpool:ethers.BigNumber;\n    rtokenAllowed: boolean;\n    setRTokenAllowed: (allowed: boolean) => void;\n    \n    onClaim: () => Promise<void>;\n    entering: boolean;\n\n    txHappend:number;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useSTClaimState = () => {\n    const { provider,signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n\n    const [amount, setAmount] = useState(\"\");\n    const { enter, leave } = stakeActions();\n    const [rtoken,setRToken] = useState<Token>();\n    const [loading,setloading] = useState(true);\n    const [rtokenAllowed, setRTokenAllowed] = useState(false);\n\n    const [yourTotalRToken,setYourTotalRToken] = useState<ethers.BigNumber>();\n    const [yourRTokenInpool,setYourRTokenInpool] = useState<ethers.BigNumber>();\n    const [entering, setEntering] = useState(false);\n    \n    const [txHappend,setTxHappend] = useState<number>(0);\n\n    useEffect(() => {\n        setAmount(\"\");\n        setRToken(undefined);\n        setloading(true);\n        setYourTotalRToken(undefined);\n        setTxHappend(0);\n    }, [address]);\n    useAsyncEffect(async()=>{\n        if (provider && signer){\n            try{\n                const rtokenContract = getContract(\"ERC20\", BBTC, signer);\n                const rt:Token ={\n                    name: await rtokenContract.name(),\n                    address:BBTC,\n                    decimals: await rtokenContract.decimals(),\n                    symbol:await rtokenContract.symbol(),\n                    logoURI:\"\",\n                    balance:ethers.BigNumber.from(0)\n                }; \n                setRToken(await rt);\n            }finally{\n\n            }\n        }\n    },[provider,signer]);\n\n    useAsyncEffect(async()=>{\n        if (provider && signer && rtoken) {\n            setRTokenAllowed(false);\n            setloading(true);\n            try{\n                const totalRewardBalInpool = await viewGetTotalRewardBalanceInPool(await signer.getAddress(),provider);\n                const allTimeMined = await viewTotalMinedRewardFrom(await signer.getAddress(),provider);\n                setRTokenAllowed(ethers.BigNumber.from(totalRewardBalInpool).gte(BigNumber.from(0)));\n                setYourRTokenInpool(await totalRewardBalInpool);\n                setYourTotalRToken(await allTimeMined);\n            }finally{\n                setloading(false);\n            }\n        }\n    },[provider,signer,rtoken,txHappend]);\n    const onClaim = useCallback(async () => {\n        if (provider && amount && rtoken && signer) {\n            setEntering(true);\n            try {\n                const parsed = parseBalance(amount, rtoken.decimals);\n                const tx = await apiClaimAmountOfReward(await signer.getAddress(),parsed,true,signer);\n                if (tx) {\n                    await tx.wait();\n                    // await updateTokens();\n                    setAmount(\"\");\n                    const txs = txHappend+1;\n                    setTxHappend(txs);\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [provider,amount, rtoken, signer]);\n\n    return {\n        loading,\n        amount,\n        setAmount,\n        rtoken,\n        yourTotalRToken,\n        yourRTokenInpool,\n        rtokenAllowed,\n        setRTokenAllowed,\n        onClaim,\n        entering,\n        txHappend\n    };\n};\n\nexport default useSTClaimState;\n","import React, { useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { MiningSubMenu } from \"../components/web/WebSubMenu\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport useSTClaimState, { ClaimState } from \"../hooks/useSTClaimState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\nimport useColors from \"../hooks/useColors\";\nimport { ethers } from \"ethers\";\n\nconst SHTClaimScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"claim\")} />\n                    <Text light={true}>{t(\"claim-desc\")}</Text>\n                    <Staking />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <MiningSubMenu />\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const t = useTranslation();\n    const state = useSTClaimState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <RTokenBalance state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.rtoken && state.yourRTokenInpool?.isZero() && (\n                <Notice text={t(\"you-dont-have-reward-token\")} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <ClaimInfo state={state} />\n        </View>\n    );\n};\n\nconst RTokenBalance = ({ state }: { state: ClaimState }) => {\n    const t = useTranslation();\n    const {loading,yourTotalRToken,yourRTokenInpool,rtokenAllowed,rtoken} = state;\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <View>\n            <Heading text={t(\"your-reward\")+\" \"+(rtoken? rtoken.symbol:\"\")} />\n            <Text\n                style={{\n                    fontSize: IS_DESKTOP ? 28 : 20,\n                    marginBottom: Spacing.tiny,\n                    color: loading? textLight : textDark \n                }}>\n                {loading || !state.rtoken || !yourRTokenInpool? t(\"fetching\")\n                    :t(\"you-have\")+\" \"+\n                    formatBalance(yourRTokenInpool, state.rtoken.decimals)+\" \"+state.rtoken.symbol\n                    +\" \"+t(\"in-pool\")}\n            </Text>\n            <Text\n                style={{\n                    fontSize: IS_DESKTOP ? 14 : 10,                    \n                    marginBottom: Spacing.tiny,\n                    color: loading? textLight : textDark \n                }}>\n                {loading || !state.rtoken || !yourTotalRToken? \"\"\n                :t(\"all-time-mined\")+\" \"+formatBalance(yourTotalRToken, state.rtoken.decimals)\n               }\n            </Text>\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: ClaimState }) => {\n    const t = useTranslation();\n    if (!state.rtoken ||!state.yourRTokenInpool|| state.yourRTokenInpool.isZero()) {\n        return <Heading text={t(\"amount-to-claim\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={t(\"amount-to-claim\")} />\n            <TokenInput\n                token={state.rtoken}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst ClaimInfo = ({ state }: { state: ClaimState }) => {\n    const t = useTranslation();\n    const disabled =\n        !state.rtoken || !state.yourRTokenInpool||\n        state.yourRTokenInpool.isZero() ||\n        isEmptyValue(state.amount);\n    let willGet = disabled?undefined:parseBalance(state.amount, state.rtoken?.decimals);\n    if (willGet && willGet?.gt(state.yourRTokenInpool)){\n        willGet = state.yourRTokenInpool;\n    }\n    return (\n        <InfoBox>\n            <AmountMeta\n                amount={willGet ? formatBalance(willGet,state.rtoken!.decimals) : \"\"}\n                suffix={state.rtoken?state.rtoken!.symbol:\"\"}\n                disabled={disabled}\n            />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: ClaimState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.rtoken || !state.yourRTokenInpool|| state.yourRTokenInpool.isZero() || isEmptyValue(state.amount) ? (\n                <ClaimButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.rtoken.decimals).gt(state.yourRTokenInpool) ? (\n                <InsufficientBalanceButton symbol={state.rtoken.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ClaimButton state={state} onError={setError} disabled={!state.rtokenAllowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst ClaimButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: ClaimState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onClaim();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={t(\"claim\")} loading={state.entering} onPress={onPress} disabled={disabled} />;\n};\n\nexport default SHTClaimScreen;\n"],"sourceRoot":""}