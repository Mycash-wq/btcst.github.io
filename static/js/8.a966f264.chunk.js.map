{"version":3,"sources":["assets/flags/us.png","assets/flags/cn.png","assets/flags/kr.png","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","src/components/Heading.tsx","src/components/Border.tsx","src/utils/api-utils.ts","src/components/Loading.tsx","src/hooks/useMiningState.tsx","src/screens/SHTMiningScreen.tsx"],"names":["module","exports","Column","props","View","style","width","marginTop","noTopMargin","Platform","OS","Spacing","large","normal","SocialIcon","darkMode","useContext","GlobalContext","useColors","background","textLight","light","iconColor","undefined","backgroundColor","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onPressDiscord","onPressHome","FlexView","justifyContent","type","onPress","name","raised","reverse","color","reverseColor","containerStyle","flags","us","require","cn","kr","Flag","locale","history","useHistory","location","useLocation","TouchableHighlight","push","pathname","marginHorizontal","Image","source","height","WebFooter","padding","alignItems","Text","note","tiny","Constants","manifest","version","small","Heading","accent","marginBottom","disabled","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","text","buttonText","size","title","onPressButton","buttonStyle","paddingHorizontal","Border","border","fetchTotalMinedRTokenInpool","provider","a","async","contract","getContract","BTCSTFarm","viewAllTimeTotalMined","value","fetchCurrentTotalStakedSTokenInpool","BTCST","balanceOf","console","log","totalSupplyOfSToken","totalSupply","getFreeToTransferAmount","account","viewUserInfo","stakeActions","enter","useCallback","amount","signer","farm","estimateGas","apiDepositToMining","gasLimit","toString","mul","div","tx","logTransaction","leave","apiWithdrawLatestSToken","viewTotalMinedRewardFrom","viewGetTotalRewardBalanceInPool","apiClaimAmountOfReward","reCalculate","Loading","marginVertical","useMiningState","EthersContext","address","tokens","useState","totalMinedBTC","setTotalMinedBTC","loadingTotalMined","setLoadingTotalMined","btcInpool","setBtcInpool","loadingBTCInpool","setloadingBTCInpool","yourMiningPower","setYourMiningPower","loadingYourMiningPower","setLoadingYourMiningPower","userInfo","setUserInfo","loadingUserInfo","setLoadingUserInfo","useEffect","useAsyncEffect","fetched","rtokenContract","BBTC","getAddress","userInfoInFarm","Mining","state","BtcStillInPool","t","useTranslation","loadingTokens","loading","Title","formatBalance","YourMiningPower","goToFarming","number","ethers","BigNumber","from","suffix","YourStakingRecord","records","stakeInfo","recordItem","RecordItem","LoadingNumber","RecordList","renderItem","item","key","timeKey","record","data","useMemo","filter","sub","withdrawed","gt","lockedAmount","lockedWithdrawed","sort","t1","t2","toNumber","length","paddingVertical","caption","numberOfLines","marginLeft","path","FlatList","keyExtractor","ItemSeparatorComponent","EmptyList","margin","textAlign","freeRemain","lockedRemain","formatTimeKey","ExternalIcon","textDark","isETH","endsWith","constants","AddressZero","window","open","toLowerCase","SHTMiningScreen","totalValue","Screen","Container","BackgroundImage","Content","huge"],"mappings":"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","file":"static/js/8.a966f264.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/us.d367121f.png\";","module.exports = __webpack_public_path__ + \"static/media/cn.baedda5d.png\";","module.exports = __webpack_public_path__ + \"static/media/kr.146730ea.png\";","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"https://twitter.com/standardhashrate\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/Standard-Hashrate-Group\", \"\", \"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.gg/standardhashrate\", \"\", \"_blank\");\n    const onPressHome = useLinker(\"https://www.1-b.tc\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <SocialIcon type=\"wordpress\" onPress={onPressHome} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport Column from \"../Column\";\nimport FlexView from \"../FlexView\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst flags = {\n    us: require(\"../../../assets/flags/us.png\"),\n    cn: require(\"../../../assets/flags/cn.png\"),\n    kr: require(\"../../../assets/flags/kr.png\")\n};\n\nconst WebFooter = () => {\n    const onPressAlchemy = useLinker(\n        \"https://dashboard.alchemyapi.io/signup\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ width: \"100%\", padding: Spacing.normal, alignItems: \"center\" }}>\n                <SocialIcons />\n                {/* <TouchableHighlight onPress={onPressAlchemy}>\n                    <Image\n                        source={require(\"../../../assets/alchemy.png\")}\n                        style={{ width: 188, height: 40, marginTop: Spacing.tiny }}\n                    />\n                </TouchableHighlight> */}\n                <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                    Built with ❤️ by StandardHashrate (v{Constants.manifest.version})\n                </Text>\n                <FlexView style={{ marginTop: Spacing.small }}>\n                    <Flag name={\"us\"} locale={\"en\"} />\n                    <Flag name={\"cn\"} locale={\"zh\"} />\n                    {/* <Flag name={\"kr\"} locale={\"ko\"} /> */}\n                </FlexView>\n            </View>\n        </Column>\n    );\n};\n\nconst Flag = ({ name, locale }) => {\n    const history = useHistory();\n    const location = useLocation();\n    const onPress = () => {\n        history.push(location.pathname + \"?locale=\" + locale);\n    };\n    return (\n        <TouchableHighlight onPress={onPress} style={{ marginHorizontal: 4 }}>\n            <Image source={flags[name]} style={{ width: 30, height: 20 }} />\n        </TouchableHighlight>\n    );\n};\n\nexport default WebFooter;\n","import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import { FACTORY_ADDRESS as SUSHISWAP_FACTORY, Pair } from \"@sushiswap/sdk\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport { FACTORY_ADDRESS as UNISWAP_FACTORY } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\n\nimport Fraction from \"../constants/Fraction\";\nimport { ETH } from \"../constants/tokens\";\nimport { ALCHEMY_PROVIDER } from \"../context/EthersContext\";\nimport { Order, OrderStatus } from \"../hooks/useSettlement\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { useCallback } from \"react\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nimport {\n    convertToken,\n    formatBalance,\n    getContract,\n    isETH,\n    isWETH,\n    parseBalance,\n    parseCurrencyAmount,\n    pow10\n} from \"./index\";\nexport const fetchTotalMinedRTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewAllTimeTotalMined();\n    return value;\n};\n\nexport const fetchCurrentTotalStakedSTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.balanceOf(BTCSTFarm);\n    console.log(\"fetchCurrentTotalStakedSTokenInpool\");\n    console.log(value);\n    return value;\n};\n\nexport const viewTotalRewardInPoolFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPoolFrom(account);\n    return value;\n    \n};\nexport const totalSupplyOfSToken = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.totalSupply();\n    return value;\n};\n\nexport const viewTotalRewardInPool = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPool();\n    return value;\n};\n\nexport const getFreeToTransferAmount = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"ISTokenERC20\",BTCST,provider);\n    const value = await contract.getFreeToTransferAmount(account);\n    return value;\n};\n\nexport const viewUserInfo = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewUserInfo(account);\n    return value;\n};\n\nexport const stakeActions = ()=>{\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiDepositToMining(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiDepositToMining(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiWithdrawLatestSToken(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiWithdrawLatestSToken(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport const viewTotalMinedRewardFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalMinedRewardFrom(account);\n    return value;\n};\n\nexport const viewGetTotalRewardBalanceInPool = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewGetTotalRewardBalanceInPool(account);\n    return value;\n};\n\nexport const apiClaimAmountOfReward = async(account: string,amount: ethers.BigNumber,reCalculate :boolean ,signer: ethers.Signer)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,signer);\n    const gasLimit = await contract.estimateGas.apiClaimAmountOfReward(account,amount,reCalculate);\n    const tx = await contract.apiClaimAmountOfReward(account,amount,reCalculate, {\n        gasLimit: gasLimit.mul(120).div(100)\n    });\n    return logTransaction(tx, \"farmActions.apiClaimAmountOfReward()\", amount.toString());\n};","import React from \"react\";\nimport { ActivityIndicator } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\nconst Loading = () => <ActivityIndicator size={\"large\"} style={{ marginVertical: Spacing.large }} />;\n\nexport default Loading;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport { isWETH } from \"../utils\";\nimport { fetchLPTokenWithValue, fetchMyLPTokens, fetchMyPools } from \"../utils/fetch-utils\";\nimport useSDK from \"./useSDK\";\nimport { viewUserInfo,totalSupplyOfSToken,fetchTotalMinedRTokenInpool, fetchCurrentTotalStakedSTokenInpool,viewTotalRewardInPoolFrom} from \"../utils/api-utils\";\nimport { getContract, parseBalance } from \"../utils\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport MiningUserInfo from \"../types/MiningUserInfo\";\nimport MiningStakeRecord from \"../types/MiningStakeRecord\";\n\nexport interface MiningState {\n    totalMinedBTC:ethers.BigNumber;\n    loadingTotalMined:boolean;\n    btcInpool:ethers.BigNumber;\n    loadingBTCInpool:boolean;\n    yourMiningPower:ethers.BigNumber;\n    loadingYourMiningPower:boolean; \n    userInfo:MiningUserInfo;\n    loadingUserInfo:boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useMiningState = () => {\n    const { provider, signer, address, tokens } = useContext(EthersContext);\n\n    const [totalMinedBTC,setTotalMinedBTC] = useState<ethers.BigNumber>();\n    const [loadingTotalMined,setLoadingTotalMined] = useState(true);\n    \n    const [btcInpool,setBtcInpool] = useState<ethers.BigNumber>();\n    const [loadingBTCInpool,setloadingBTCInpool] = useState(true);\n\n    const [yourMiningPower,setYourMiningPower] = useState<ethers.BigNumber>();\n    const [loadingYourMiningPower,setLoadingYourMiningPower] = useState(true);\n    \n    const [userInfo,setUserInfo] = useState<MiningUserInfo>();\n    const [loadingUserInfo,setLoadingUserInfo] = useState(true);\n\n    useEffect(() => {\n        setTotalMinedBTC(undefined);\n        setLoadingTotalMined(true);\n        setBtcInpool(undefined);\n        setloadingBTCInpool(true);\n        setYourMiningPower(undefined);\n        setLoadingYourMiningPower(true);\n        setLoadingUserInfo(true);\n    }, [address]);\n\n    //load total mined BTC in all\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            setLoadingTotalMined(true);\n            const fetched = await fetchTotalMinedRTokenInpool(provider);\n            try{\n                setTotalMinedBTC(await fetched);\n            }finally{\n                setLoadingTotalMined(false);\n            }\n        }\n    },[provider,signer]);\n    //load current total staked btcst\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setloadingBTCInpool(true);\n            try{\n                const rtokenContract = getContract(\"ERC20\", BBTC, signer);\n                setBtcInpool(await rtokenContract.balanceOf(BTCSTFarm)); \n            }finally{\n                setloadingBTCInpool(false);\n            }\n        }\n    },[provider,signer]);\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setLoadingYourMiningPower(true);\n            setLoadingUserInfo(true);\n            const userInfoInFarm = await viewUserInfo(await signer.getAddress(),provider);\n            try{\n                setYourMiningPower((await userInfoInFarm).amount);\n                setUserInfo(await userInfoInFarm);\n            }finally{\n                setLoadingYourMiningPower(false);\n                setLoadingUserInfo(false);\n            }\n        }\n    },[provider,signer]);\n    \n    return {\n        totalMinedBTC,\n        loadingTotalMined,\n        btcInpool,\n        loadingBTCInpool,\n        yourMiningPower,\n        loadingYourMiningPower,\n        userInfo,\n        loadingUserInfo\n    };\n};\n\nexport default useMiningState;\n","import React, { FC, useCallback, useContext, useMemo } from \"react\";\nimport { FlatList, Platform, TouchableHighlight, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport { BigNumber, ethers } from \"ethers\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport Loading from \"../components/Loading\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\n\nimport WebFooter from \"../components/web/WebFooter\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\n\nimport useMiningState, { MiningState } from \"../hooks/useMiningState\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { formatUSD,formatBalance, formatTimeKey } from \"../utils\";\nimport Screen from \"./Screen\";\nimport MiningStakeRecord from \"../types/MiningStakeRecord\";\nimport { MiningSubMenu } from \"../components/web/WebSubMenu\";\n\ninterface StakeRecordItemProps {\n    record: MiningStakeRecord;\n    disabled?: boolean;\n}\nconst SHTMiningScreen = () => {\n    const t = useTranslation();\n    const state = useMiningState();\n    const { loadingTokens } = useContext(EthersContext);\n    const loading = state.loadingTotalMined;\n    const totalValue = state.totalMinedBTC;\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content style={{ paddingBottom: Spacing.huge }}>\n                    <Title text={t(\"total-mined\")} style={{ flex: 1 }} />\n                    <Title\n                        text={loading ||totalValue==undefined ? t(\"fetching\") : formatBalance(totalValue)}\n                        fontWeight={\"light\"}\n                        disabled={loading}\n                        style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n                    />\n                    <Mining state={state} />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <MiningSubMenu />\n        </Screen>\n    );\n};\n\nconst Mining = ({ state }: { state: MiningState }) => {\n    return (\n        <View style={{ marginTop: IS_DESKTOP ? Spacing.large : Spacing.normal }}>\n            <BtcStillInPool state={state} />\n            <View style={{ height: Spacing.large }} />\n            <YourMiningPower state={state} />\n            <View style={{ height: Spacing.large }} />\n            <YourStakingRecord state={state} />\n        </View>\n    );\n};\n\nconst BtcStillInPool = ({ state }: { state: MiningState }) => {\n    const t = useTranslation();\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const amount = state.btcInpool;\n    const loading = state.loadingBTCInpool;\n    return (\n        <View>\n            <Heading text={t(\"total-btc-still-in-pool\")}/>\n            <Title\n                        text={loading || amount==undefined ? t(\"fetching\") : formatBalance(amount)}\n                        fontWeight={\"light\"}\n                        disabled={loading}\n                        style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n                    />\n        </View>\n    );\n};\nconst YourMiningPower = ({ state }: { state: MiningState }) => {\n    const t = useTranslation();\n    const goToFarming = useLinker(\"/staking\", \"Stake\");\n    return (\n        <View>\n            <Heading text={t(\"your-mining-power\")} buttonText={t(\"stake\")} onPressButton={goToFarming} />\n            {/* @ts-ignore */}\n            <LoadingNumber loading={state.loadingYourMiningPower}\n                 number={state.yourMiningPower?.div(ethers.BigNumber.from(10))} suffix={\"TH/s\"} />\n        </View>\n    );\n};\n\nconst YourStakingRecord = ({ state }: { state: MiningState }) => {\n    const t = useTranslation();\n    \n    return (\n        <View>\n            <Heading text={t(\"your-staking-records\")} />\n            {/* @ts-ignore */}\n            <RecordList loading={state.loadingUserInfo} records={state.userInfo?.stakeInfo} recordItem={RecordItem}/>\n        </View>\n    );\n};\n\n\n\nconst LoadingNumber = (props:{\n    loading:boolean;\n    number:ethers.BigNumber;\n    suffix:string;\n})=>{\n    // const text = formatBalance(props.number)+\"\"+props.suffix;\n    const suffix = props.suffix?props.suffix:\"\";\n    return (props.loading || props.number==undefined) ?(\n        <Loading />\n    ):(\n        <Title text={formatBalance(props.number)+\"\"+suffix} fontWeight={\"light\"} disabled={props.loading}\n            style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n        />\n    );\n}\nconst RecordList = (props: {\n    loading: boolean;\n    records?: MiningStakeRecord[];\n    recordItem: FC<StakeRecordItemProps>;\n}) => {\n    const t = useTranslation();\n    const renderItem = useCallback(({ item }) => {\n        return <props.recordItem key={item.timeKey} record={item} />;\n    }, []);\n    const data = useMemo(\n        () =>\n            (props.records || [])\n                // @ts-ignore\n                .filter(record => ( record.amount.sub(record.withdrawed).gt(ethers.BigNumber.from(0)) ||\n                        record.lockedAmount.sub(record.lockedWithdrawed).gt(ethers.BigNumber.from(0)) ) )\n                .sort((t1, t2) => (t2.timeKey.toNumber() || 0) - (t1.timeKey.toNumber() || 0)),\n        [props.records]\n    );\n    return props.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <View>\n            <FlexView style={{ alignItems: \"center\", paddingHorizontal: Spacing.tiny, paddingVertical: 4 }}>\n                <View style={{flex:1,alignItems:\"flex-start\"}}>\n                    <Text caption={true} numberOfLines={1} fontWeight={\"light\"}>\n                        {\"BTCST\"}\n                    </Text>\n                </View>\n                <View>\n                    <Text caption={true} numberOfLines={1}  style={{ marginLeft: Spacing.small}}>\n                        {t(\"locked\")}\n                    </Text>\n                </View>\n                <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                    <Text caption={true} fontWeight={\"light\"} >\n                        {t(\"date\")}\n                    </Text>\n                </View>\n                <ExternalIcon path={\"/tokens/\" } />\n            </FlexView>\n            <FlatList\n                keyExtractor={item => item.timeKey.toString()}\n                data={data}\n                renderItem={renderItem}\n                ItemSeparatorComponent={() => <Border small={true} />}\n            />\n        </View>\n    );\n};\nconst EmptyList = () => {\n    const t = useTranslation();\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {t(\"you-dont-have-assets\")}\n            </Text>\n        </View>\n    );\n};\nconst RecordItem = (props: StakeRecordItemProps) => {\n    const record = props.record;\n    const freeRemain = record.amount.sub(record.withdrawed);\n    const lockedRemain = record.lockedAmount.sub(record.lockedWithdrawed);\n    return (\n        <FlexView style={{ alignItems: \"center\", paddingHorizontal: Spacing.tiny, paddingVertical: 4 }}>\n            <View style={{flex:1,alignItems:\"flex-start\"}}>\n                <Text caption={true} numberOfLines={1} fontWeight={\"light\"}\n                    disabled={props.disabled}>\n                    {freeRemain.gt(BigNumber.from(0)) ? formatBalance(freeRemain || 0): \"N/A\"}\n                </Text>\n            </View>\n            <View>\n                <Text caption={true} numberOfLines={1}  \n                    style={{ marginLeft: Spacing.small}}\n                    disabled={props.disabled}>\n                    {lockedRemain.gt(BigNumber.from(0)) ? formatBalance(lockedRemain || 0): \"N/A\"}\n                </Text>\n            </View>\n            <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                <Text caption={true} fontWeight={\"light\"} disabled={props.disabled}>\n                    {formatTimeKey(record.timeKey)}\n                </Text>\n            </View>\n            <ExternalIcon path={\"/tokens/\" + record.timeKey} />\n        </FlexView>\n    );\n};\nconst ExternalIcon = ({ path }) => {\n    const { textDark, disabled } = useColors();\n    const onPress = () => window.open(\"https://sushiswapanalytics.com/\" + path.toLowerCase(), \"_blank\");\n    const isETH = path.endsWith(ethers.constants.AddressZero);\n    return (\n        <TouchableHighlight onPress={onPress} disabled={isETH}>\n            <Icon\n                type={\"evilicon\"}\n                name={\"external-link\"}\n                color={isETH ? disabled : textDark}\n                style={{ marginLeft: Spacing.tiny }}\n            />\n        </TouchableHighlight>\n    );\n};\nexport default SHTMiningScreen;\n"],"sourceRoot":""}