{"version":3,"sources":["src/components/Heading.tsx","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","src/components/TokenLogo.tsx","src/components/Border.tsx","assets/flags/us.png","assets/flags/cn.png","assets/flags/kr.png","src/components/Loading.tsx","src/components/TokenSymbol.tsx","src/components/TokenAmount.tsx","src/components/TokenName.tsx","assets/empty-token.png","assets/ETH.png","src/components/TokenPrice.tsx","src/components/TokenValue.tsx","src/utils/api-utils.ts","src/hooks/useHomeState.tsx","src/screens/SHTMiningScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","Column","View","width","marginTop","noTopMargin","Platform","OS","large","normal","SocialIcon","darkMode","useContext","GlobalContext","background","textLight","light","iconColor","undefined","backgroundColor","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onPressDiscord","FlexView","justifyContent","name","raised","reverse","reverseColor","containerStyle","flags","us","require","cn","kr","Flag","locale","history","useHistory","location","useLocation","TouchableHighlight","push","pathname","marginHorizontal","Image","source","WebFooter","padding","Text","note","Constants","manifest","version","TokenLogo","backgroundLight","useState","error","setError","placeholder","ETH","replaceWETH","isWETH","token","uri","logoURI","borderRadius","onError","opacity","Border","border","module","exports","Loading","marginVertical","TokenSymbol","caption","marginLeft","symbol","TokenAmount","formatBalance","amount","balance","decimals","TokenName","numberOfLines","ellipsizeMode","TokenPrice","formatUSD","priceUSD","TokenValue","valueUSD","fetchTotalMinedRTokenInpool","provider","a","async","contract","getContract","BTCSTFarm","viewAllTimeTotalMined","value","fetchCurrentTotalStakedSTokenInpool","BTCST","balanceOf","console","log","viewTotalRewardInPoolFrom","account","totalSupplyOfSToken","totalSupply","getFreeToTransferAmount","viewUserInfo","useHomeState","EthersContext","signer","address","tokens","lpTokens","setLPTokens","pools","setPools","loadingLPTokens","setLoadingLPTokens","loadingPools","setLoadingPools","useSDK","getPair","loadingTotalMined","setLoadingTotalMined","totalMinedBTC","setTotalMinedBTC","totalStakedBTCST","setTotalStakedBTCST","setLoadingTotalStaked","yourBTCInpool","setYourBTCInpool","setloadingBTCInpool","totalMiningPower","setTotalMiningPower","setLoadingTotalMiningPower","useEffect","useAsyncEffect","fetched","getAddress","Home","state","Inpool","MyLPTokens","Pools","t","useTranslation","goToSwap","loadingTokens","goToRemoveLiquidity","TokenList","loading","TokenItem","LPTokenItem","goToFarming","renderItem","useCallback","item","key","data","useMemo","filter","amountDeposited","isZero","sort","t1","t2","length","EmptyList","keyExtractor","ItemSeparatorComponent","margin","textAlign","paddingVertical","tokenA","tokenB","ExternalIcon","path","textDark","isETH","endsWith","ethers","constants","AddressZero","window","open","toLowerCase","sum","reduce","previous","current","SHTMiningScreen","totalValue","huge"],"mappings":"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","file":"static/js/12.88f0bc7a.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"https://twitter.com/standardhashrate\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/Standard-Hashrate-Group\", \"\", \"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.gg/standardhashrate\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport Column from \"../Column\";\nimport FlexView from \"../FlexView\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst flags = {\n    us: require(\"../../../assets/flags/us.png\"),\n    cn: require(\"../../../assets/flags/cn.png\"),\n    kr: require(\"../../../assets/flags/kr.png\")\n};\n\nconst WebFooter = () => {\n    const onPressAlchemy = useLinker(\n        \"https://dashboard.alchemyapi.io/signup?referral=429fb682-0d85-40ab-ad88-daf847cf7c63\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ width: \"100%\", padding: Spacing.normal, alignItems: \"center\" }}>\n                <SocialIcons />\n                {/* <TouchableHighlight onPress={onPressAlchemy}>\n                    <Image\n                        source={require(\"../../../assets/alchemy.png\")}\n                        style={{ width: 188, height: 40, marginTop: Spacing.tiny }}\n                    />\n                </TouchableHighlight> */}\n                <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                    Built with ❤️ by StandardHashrate (v{Constants.manifest.version})\n                </Text>\n                <FlexView style={{ marginTop: Spacing.small }}>\n                    <Flag name={\"us\"} locale={\"en\"} />\n                    <Flag name={\"cn\"} locale={\"zh\"} />\n                    <Flag name={\"kr\"} locale={\"ko\"} />\n                </FlexView>\n            </View>\n        </Column>\n    );\n};\n\nconst Flag = ({ name, locale }) => {\n    const history = useHistory();\n    const location = useLocation();\n    const onPress = () => {\n        history.push(location.pathname + \"?locale=\" + locale);\n    };\n    return (\n        <TouchableHighlight onPress={onPress} style={{ marginHorizontal: 4 }}>\n            <Image source={flags[name]} style={{ width: 30, height: 20 }} />\n        </TouchableHighlight>\n    );\n};\n\nexport default WebFooter;\n","import React, { useState } from \"react\";\nimport { Image, View, ViewStyle } from \"react-native\";\n\nimport useColors from \"../hooks/useColors\";\nimport Token from \"../types/Token\";\nimport { isWETH } from \"../utils\";\n\nconst TokenLogo = (props: {\n    token: Token;\n    small?: boolean;\n    replaceWETH?: boolean;\n    disabled?: boolean;\n    style?: ViewStyle;\n}) => {\n    const { backgroundLight: disabled } = useColors();\n    const [error, setError] = useState(false);\n    const size = props.small ? 22 : 27;\n    const placeholder = require(\"../../assets/empty-token.png\");\n    const ETH = require(\"../../assets/ETH.png\");\n    const source = props.replaceWETH && isWETH(props.token) ? ETH : { uri: props.token.logoURI };\n    return (\n        <View\n            style={[\n                {\n                    width: size,\n                    height: size,\n                    backgroundColor: props.disabled ? disabled : \"white\",\n                    borderRadius: size / 2\n                },\n                props.style\n            ]}>\n            <Image\n                source={!props.token.logoURI || error ? placeholder : source}\n                onError={() => setError(true)}\n                style={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    borderRadius: size / 2,\n                    opacity: props.disabled ? 0.5 : 1\n                }}\n            />\n        </View>\n    );\n};\n\nexport default TokenLogo;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","module.exports = __webpack_public_path__ + \"static/media/us.d367121f.png\";","module.exports = __webpack_public_path__ + \"static/media/cn.baedda5d.png\";","module.exports = __webpack_public_path__ + \"static/media/kr.146730ea.png\";","import React from \"react\";\nimport { ActivityIndicator } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\nconst Loading = () => <ActivityIndicator size={\"large\"} style={{ marginVertical: Spacing.large }} />;\n\nexport default Loading;\n","import React from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenSymbol = (props: { token: Token; disabled?: boolean }) => (\n    <Text medium={true} caption={true} disabled={props.disabled} style={{ marginLeft: Spacing.tiny }}>\n        {props.token.symbol}\n    </Text>\n);\n\nexport default TokenSymbol;\n","import React from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport { formatBalance } from \"../utils\";\nimport Text from \"./Text\";\n\nconst TokenAmount = (props: { token: Token; amount?: ethers.BigNumber; disabled?: boolean; style?: TextStyle }) => (\n    <Text caption={IS_DESKTOP} disabled={props.disabled} style={props.style}>\n        {formatBalance(props.amount || props.token.balance, props.token.decimals, 8)}\n    </Text>\n);\n\nexport default TokenAmount;\n","import React from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenName = (props: { token: Token; disabled?: boolean }) => (\n    <Text\n        caption={true}\n        numberOfLines={1}\n        ellipsizeMode={\"tail\"}\n        style={{ marginLeft: Spacing.small, width: 180 }}\n        disabled={props.disabled}>\n        {IS_DESKTOP ? props.token.name : props.token.symbol}\n    </Text>\n);\n\nexport default TokenName;\n","module.exports = __webpack_public_path__ + \"static/media/empty-token.e8aa64c5.png\";","module.exports = __webpack_public_path__ + \"static/media/ETH.ab794f02.png\";","import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { formatUSD } from \"../utils\";\nimport Text from \"./Text\";\n\nexport interface TokenPriceProps {\n    token: TokenWithValue;\n    disabled?: boolean;\n    style?: TextStyle;\n}\n\nconst TokenPrice: FC<TokenPriceProps> = props => {\n    return (\n        <Text note={true} fontWeight={\"light\"} disabled={props.disabled} style={props.style}>\n            {formatUSD(props.token.priceUSD || 0, 4)}\n        </Text>\n    );\n};\n\nexport default TokenPrice;\n","import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { formatUSD } from \"../utils\";\nimport Text from \"./Text\";\n\nexport interface TokenValueProps {\n    token: TokenWithValue;\n    disabled?: boolean;\n    style?: TextStyle;\n}\n\nconst TokenValue: FC<TokenValueProps> = props => {\n    return (\n        <Text note={true} fontWeight={\"light\"} disabled={props.disabled} style={props.style}>\n            {formatUSD(props.token.valueUSD || 0, 4)}\n        </Text>\n    );\n};\n\nexport default TokenValue;\n","import { FACTORY_ADDRESS as SUSHISWAP_FACTORY, Pair } from \"@sushiswap/sdk\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport { FACTORY_ADDRESS as UNISWAP_FACTORY } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\n\nimport Fraction from \"../constants/Fraction\";\nimport { ETH } from \"../constants/tokens\";\nimport { ALCHEMY_PROVIDER } from \"../context/EthersContext\";\nimport { Order, OrderStatus } from \"../hooks/useSettlement\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { useCallback } from \"react\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport {\n    convertToken,\n    formatBalance,\n    getContract,\n    isETH,\n    isWETH,\n    parseBalance,\n    parseCurrencyAmount,\n    pow10\n} from \"./index\";\n\nexport const fetchTotalMinedRTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewAllTimeTotalMined();\n    return value;\n};\n\nexport const fetchCurrentTotalStakedSTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.balanceOf(BTCSTFarm);\n    console.log(\"fetchCurrentTotalStakedSTokenInpool\");\n    console.log(value);\n    return value;\n};\n\nexport const viewTotalRewardInPoolFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPoolFrom(account);\n    return value;\n    \n};\nexport const totalSupplyOfSToken = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.totalSupply();\n    return value;\n};\n\nexport const viewTotalRewardInPool = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPool();\n    return value;\n};\n\nexport const getFreeToTransferAmount = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"ISTokenERC20\",BTCST,provider);\n    const value = await contract.getFreeToTransferAmount(account);\n    return value;\n};\n\nexport const viewUserInfo = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewUserInfo(account);\n    return value;\n};\n\nexport const stakeActions = ()=>{\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        const gasLimit = await sushiBar.estimateGas.apiDepositToMining(amount);\n        const tx = await sushiBar.apiDepositToMining(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        const gasLimit = await sushiBar.estimateGas.leave(amount);\n        const tx = await sushiBar.leave(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};","import { useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport { isWETH } from \"../utils\";\nimport { fetchLPTokenWithValue, fetchMyLPTokens, fetchMyPools } from \"../utils/fetch-utils\";\nimport useSDK from \"./useSDK\";\nimport { totalSupplyOfSToken,fetchTotalMinedRTokenInpool, fetchCurrentTotalStakedSTokenInpool,viewTotalRewardInPoolFrom} from \"../utils/api-utils\";\n\nexport interface HomeState {\n    totalMinedBTC:ethers.BigNumber;\n    totalStakedBTCST:ethers.BigNumber;\n    yourBTCInpool:ethers.BigNumber;\n    totalMiningPower:ethers.BigNumber;\n    \n    loadingTotalMined:boolean;\n    loadingTotalStaked:boolean;\n    loadingBTCInpool:boolean;\n    loadingTotalMiningPower:boolean;\n\n    loadingLPTokens: boolean;\n    loadingPools: boolean;\n    lpTokens?: LPTokenWithValue[];\n    pools?: LPTokenWithValue[];\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useHomeState = () => {\n    const { provider, signer, address, tokens } = useContext(EthersContext);\n    \n    const [lpTokens, setLPTokens] = useState<LPTokenWithValue[]>();\n    const [pools, setPools] = useState<LPTokenWithValue[]>();\n    const [loadingLPTokens, setLoadingLPTokens] = useState(true);\n    const [loadingPools, setLoadingPools] = useState(true);\n    \n    const { getPair } = useSDK();\n\n    const [loadingTotalMined,setLoadingTotalMined] = useState(true);\n    const [totalMinedBTC,setTotalMinedBTC] = useState<ethers.BigNumber>();\n    const [totalStakedBTCST,setTotalStakedBTCST] = useState<ethers.BigNumber>();\n    const [loadingTotalStaked,setLoadingTotalStaked] = useState(true);\n    const [yourBTCInpool,setYourBTCInpool] = useState<ethers.BigNumber>();\n    const [loadingBTCInpool,setloadingBTCInpool] = useState(true);\n    const [totalMiningPower,setTotalMiningPower] = useState<ethers.BigNumber>();\n    const [loadingTotalMiningPower,setLoadingTotalMiningPower] = useState(true);\n    \n\n    useEffect(() => {\n        setLPTokens(undefined);\n        setPools(undefined);\n        setLoadingLPTokens(true);\n        setLoadingPools(true);\n        setTotalMinedBTC(undefined);\n        setTotalStakedBTCST(undefined);\n        setYourBTCInpool(undefined);\n        setTotalMiningPower(undefined);\n\n        setLoadingTotalMined(true);\n        setLoadingTotalStaked(true);\n        setloadingBTCInpool(true);\n        setLoadingTotalMiningPower(true);\n    }, [address]);\n\n    //load total mined BTC in all\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            setLoadingTotalMined(true);\n            const fetched = await fetchTotalMinedRTokenInpool(provider);\n            try{\n                setTotalMinedBTC(await fetched);\n            }finally{\n                setLoadingTotalMined(false);\n            }\n        }\n    },[provider,signer]);\n    //load current total staked btcst\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setLoadingTotalStaked(true);\n            const fetched = await fetchCurrentTotalStakedSTokenInpool(provider);\n            try{\n                setTotalStakedBTCST(await fetched);\n            }finally{\n                setLoadingTotalStaked(false);\n            }\n        }\n    },[provider,signer]);\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setloadingBTCInpool(true);\n            const fetched = await viewTotalRewardInPoolFrom(await signer.getAddress(),provider);\n            try{\n                setYourBTCInpool(await fetched);\n            }finally{\n                setloadingBTCInpool(false);\n            }\n        }\n    },[provider,signer]);\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setLoadingTotalMiningPower(true);\n            const fetched = await totalSupplyOfSToken(provider);\n            try{\n                setTotalMiningPower(await fetched);\n            }finally{\n                setLoadingTotalMiningPower(false);\n            }\n        }\n    },[provider,signer]);\n\n\n    // Load Liquidity\n    // useAsyncEffect(async () => {\n    //     const weth = tokens.find(t => isWETH(t));\n    //     if (provider && signer && weth && tokens && tokens.length > 0) {\n    //         setLoadingLPTokens(true);\n    //         const wethPriceUSD = Fraction.parse(String(await sushiData.weth.price()));\n    //         const fetched = await fetchMyLPTokens(await signer.getAddress(), tokens, provider);\n    //         try {\n    //             setLPTokens(\n    //                 await Promise.all(\n    //                     fetched.map(lpToken => fetchLPTokenWithValue(lpToken, weth, wethPriceUSD, getPair, provider))\n    //                 )\n    //             );\n    //         } finally {\n    //             setLoadingLPTokens(false);\n    //         }\n    //     }\n    // }, [getPair, provider, signer, tokens]);\n\n    // Load Farming\n    // useAsyncEffect(async () => {\n    //     const weth = tokens.find(t => isWETH(t));\n    //     if (provider && signer && weth && tokens && tokens.length > 0 && lpTokens) {\n    //         setLoadingPools(true);\n    //         const wethPriceUSD = Fraction.parse(String(await sushiData.weth.price()));\n    //         const fetched = await fetchMyPools(await signer.getAddress(), tokens, provider);\n    //         try {\n    //             setPools(\n    //                 await Promise.all(\n    //                     fetched.map(lpToken => fetchLPTokenWithValue(lpToken, weth, wethPriceUSD, getPair, provider))\n    //                 )\n    //             );\n    //         } finally {\n    //             setLoadingPools(false);\n    //         }\n    //     }\n    // }, [getPair, provider, signer, tokens, lpTokens]);\n\n    return {\n        totalMinedBTC,\n        totalStakedBTCST,\n        yourBTCInpool,\n        totalMiningPower,\n        loadingTotalMined,\n\n        loadingLPTokens,\n        loadingPools,\n        tokens,\n        lpTokens,\n        pools\n    };\n};\n\nexport default useHomeState;\n","import React, { FC, useCallback, useContext, useMemo } from \"react\";\nimport { FlatList, Platform, TouchableHighlight, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport { ethers } from \"ethers\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport Loading from \"../components/Loading\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenAmount from \"../components/TokenAmount\";\nimport TokenLogo from \"../components/TokenLogo\";\nimport TokenName from \"../components/TokenName\";\nimport TokenPrice from \"../components/TokenPrice\";\nimport TokenSymbol from \"../components/TokenSymbol\";\nimport TokenValue from \"../components/TokenValue\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useHomeState, { HomeState } from \"../hooks/useHomeState\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { formatUSD } from \"../utils\";\nimport Screen from \"./Screen\";\n\ninterface TokenItemProps {\n    token: TokenWithValue;\n    disabled?: boolean;\n}\n\ninterface LPTokenItemProps {\n    token: LPTokenWithValue;\n    disabled?: boolean;\n}\n\nconst SHTMiningScreen = () => {\n    const t = useTranslation();\n    const state = useHomeState();\n    const { loadingTokens } = useContext(EthersContext);\n    const loading = loadingTokens || state.loadingLPTokens || state.loadingPools;\n    const totalValue = sum(state.tokens) + sum(state.lpTokens) + sum(state.pools);\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content style={{ paddingBottom: Spacing.huge }}>\n                    <Title text={t(\"total-mined\")} style={{ flex: 1 }} />\n                    <Title\n                        text={loading ? t(\"fetching\") : formatUSD(totalValue, 4)}\n                        fontWeight={\"light\"}\n                        disabled={loading}\n                        style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n                    />\n                    <Home state={state} />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n        </Screen>\n    );\n};\n\n\n\nconst Home = ({ state }: { state: HomeState }) => {\n    return (\n        <View style={{ marginTop: IS_DESKTOP ? Spacing.large : Spacing.normal }}>\n            <Inpool state={state} />\n            <View style={{ height: Spacing.large }} />\n            <MyLPTokens state={state} />\n            <View style={{ height: Spacing.large }} />\n            <Pools state={state} />\n        </View>\n    );\n};\n\nconst Inpool = ({ state }: { state: HomeState }) => {\n    const t = useTranslation();\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const goToSwap = useLinker(\"/swap\", \"Swap\");\n    return (\n        <View>\n            <Heading text={t(\"btc-still-in-pool\")} buttonText={t(\"manage\")} onPressButton={goToSwap} />\n            <Title\n                text={t(\"fetching\")}\n                fontWeight={\"light\"}\n                disabled={true}\n                style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n            />\n        </View>\n    );\n};\n\nconst MyLPTokens = ({ state }: { state: HomeState }) => {\n    const t = useTranslation();\n    const goToRemoveLiquidity = useLinker(\"/liquidity/remove\", \"RemoveLiquidity\");\n    return (\n        <View>\n            <Heading text={t(\"your-mining-power(staked BTCSTs)\")} buttonText={t(\"manage\")} onPressButton={goToRemoveLiquidity} />\n            {/* @ts-ignore */}\n            <TokenList loading={state.loadingLPTokens} tokens={state.lpTokens} TokenItem={LPTokenItem} />\n        </View>\n    );\n};\n\nconst Pools = ({ state }: { state: HomeState }) => {\n    const t = useTranslation();\n    const goToFarming = useLinker(\"/farming\", \"Farming\");\n    return (\n        <View>\n            <Heading text={t(\"your-staking-records\")} buttonText={t(\"manage\")} onPressButton={goToFarming} />\n            {/* @ts-ignore */}\n            <TokenList loading={state.loadingPools} tokens={state.pools} TokenItem={LPTokenItem} />\n        </View>\n    );\n};\n\nconst TokenList = (props: {\n    loading: boolean;\n    tokens?: TokenWithValue[] | LPTokenWithValue[];\n    TokenItem: FC<TokenItemProps | LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(({ item }) => {\n        return <props.TokenItem key={item.address} token={item} />;\n    }, []);\n    const data = useMemo(\n        () =>\n            (props.tokens || [])\n                // @ts-ignore\n                .filter(token => !(token.amountDeposited ? token.amountDeposited.isZero() : token.balance.isZero()))\n                .sort((t1, t2) => (t2.valueUSD || 0) - (t1.valueUSD || 0)),\n        [props.tokens]\n    );\n    return props.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <FlatList\n            keyExtractor={item => item.address}\n            data={data}\n            renderItem={renderItem}\n            ItemSeparatorComponent={() => <Border small={true} />}\n        />\n    );\n};\n\nconst EmptyList = () => {\n    const t = useTranslation();\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {t(\"you-dont-have-assets\")}\n            </Text>\n        </View>\n    );\n};\n\nconst TokenItem = (props: TokenItemProps) => {\n    return (\n        <FlexView style={{ alignItems: \"center\", paddingHorizontal: Spacing.tiny, paddingVertical: 4 }}>\n            <TokenLogo token={props.token} disabled={props.disabled} />\n            <View>\n                <TokenPrice token={props.token} disabled={props.disabled} style={{ marginLeft: Spacing.small }} />\n                <TokenName token={props.token} disabled={props.disabled} />\n            </View>\n            <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                <TokenValue token={props.token} disabled={props.disabled} />\n                <FlexView>\n                    <TokenAmount token={props.token} disabled={props.disabled} />\n                    {IS_DESKTOP && <TokenSymbol token={props.token} disabled={props.disabled} />}\n                </FlexView>\n            </View>\n            <ExternalIcon path={\"/tokens/\" + props.token.address} />\n        </FlexView>\n    );\n};\n\nconst LPTokenItem = (props: LPTokenItemProps) => {\n    return (\n        <FlexView style={{ alignItems: \"center\", paddingHorizontal: Spacing.tiny, paddingVertical: 4 }}>\n            <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n            <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n            <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n            </Text>\n            <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                <TokenValue token={props.token} disabled={props.disabled} />\n                <FlexView>\n                    <TokenAmount token={props.token} amount={props.token.amountDeposited} disabled={props.disabled} />\n                </FlexView>\n            </View>\n            <ExternalIcon path={\"/pairs/\" + props.token.address} />\n        </FlexView>\n    );\n};\n\nconst ExternalIcon = ({ path }) => {\n    const { textDark, disabled } = useColors();\n    const onPress = () => window.open(\"https://sushiswapanalytics.com/\" + path.toLowerCase(), \"_blank\");\n    const isETH = path.endsWith(ethers.constants.AddressZero);\n    return (\n        <TouchableHighlight onPress={onPress} disabled={isETH}>\n            <Icon\n                type={\"evilicon\"}\n                name={\"external-link\"}\n                color={isETH ? disabled : textDark}\n                style={{ marginLeft: Spacing.tiny }}\n            />\n        </TouchableHighlight>\n    );\n};\n\nconst sum = tokens => (tokens ? tokens.reduce((previous, current) => previous + (current.valueUSD || 0), 0) : 0);\n\nexport default SHTMiningScreen;\n"],"sourceRoot":""}