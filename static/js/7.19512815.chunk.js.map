{"version":3,"sources":["src/components/Heading.tsx","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","assets/flags/us.png","assets/flags/cn.png","assets/flags/kr.png","src/components/Border.tsx","src/components/ErrorMessage.tsx","src/components/InfoBox.tsx","src/components/AmountMeta.tsx","src/components/InsufficientBalanceButton.tsx","src/components/FetchingButton.tsx","src/components/Meta.tsx","src/components/Notice.tsx","src/components/TokenInput.tsx","src/components/ApproveButton.tsx","src/utils/api-utils.ts","src/components/Input.tsx","src/hooks/useSTStakingState.tsx","src/screens/SHTStakeScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","Column","View","width","marginTop","noTopMargin","Platform","OS","large","normal","SocialIcon","darkMode","useContext","GlobalContext","background","textLight","light","iconColor","undefined","backgroundColor","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onPressDiscord","onPressHome","FlexView","justifyContent","name","raised","reverse","reverseColor","containerStyle","flags","us","require","cn","kr","Flag","locale","history","useHistory","location","useLocation","TouchableHighlight","push","pathname","marginHorizontal","Image","source","WebFooter","padding","Text","note","Constants","manifest","version","module","exports","Border","border","ErrorMessage","error","code","message","InfoBox","backgroundLight","borderDark","useStyles","AmountMeta","t","useTranslation","textDark","placeholder","amount","suffix","InsufficientBalanceButton","symbol","FetchingButton","Meta","textMedium","url","label","textDecorationLine","Notice","borderStyle","clear","titleStyle","paddingVertical","alignSelf","MaxButton","onPressMax","useCallback","token","balance","isETH","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","maxButtonText","TokenInput","onChangeText","onAmountChanged","parseBalance","e","endsWith","indexOf","length","value","keyboardType","autoFocus","inputStyle","inputContainerStyle","borderBottomWidth","labelStyle","fontFamily","paddingTop","hideMaxButton","ApproveButton","approveToken","EthersContext","useState","loading","setLoading","a","async","onError","address","spender","tx","wait","onSuccess","hidden","fetchTotalMinedRTokenInpool","provider","contract","getContract","BTCSTFarm","viewAllTimeTotalMined","fetchCurrentTotalStakedSTokenInpool","BTCST","balanceOf","console","log","totalSupplyOfSToken","totalSupply","getFreeToTransferAmount","account","viewUserInfo","stakeActions","enter","signer","farm","estimateGas","apiDepositToMining","gasLimit","toString","mul","div","logTransaction","leave","apiWithdrawLatestSToken","viewTotalMinedRewardFrom","viewGetTotalRewardBalanceInPool","apiClaimAmountOfReward","reCalculate","Input","errors","forbidden","forEach","validation","match","regexp","allowed","join","minHeight","outline","placeholderTextColor","errorStyle","useSTStakingState","getTokenAllowance","tokens","updateTokens","setAmount","stoken","setSToken","setloading","stokenAllowed","setSTokenAllowed","yourTotalSToken","setYourTotalSToken","yourFreeToSendSToken","setYourFreeToSendSToken","yourSTokenStaked","setYourSTokenStaked","totalSTokenSupply","setTotalSTokenSupply","entering","setEntering","leaving","setLeaving","txHappend","setTxHappend","sToken","logoURI","BigNumber","from","useEffect","useAsyncEffect","minAllowance","pow","stokenAllowance","gte","getAddress","freeToMove","userInfoInFarm","stokenContract","onEnter","parsed","onLeave","Staking","state","STokenBalance","AmountInput","isZero","StakeInfo","isEmptyValue","powerPrice","FixedNumber","divUnsafe","powerPerHashUnitDay","mulUnsafe","dailyBTCYeild","btcPrice","dailyBTCNetrewardPerHashUnit","subUnsafe","dailyReward","alreadyReward","suppose","addUnsafe","dailyRewardTotal","fromString","share","add","round","Controls","setError","StakeButton","SHTStakeScreen"],"mappings":"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","file":"static/js/7.19512815.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"https://twitter.com/standardhashrate\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/Standard-Hashrate-Group\", \"\", \"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.gg/standardhashrate\", \"\", \"_blank\");\n    const onPressHome = useLinker(\"https://www.1-b.tc\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <SocialIcon type=\"wordpress\" onPress={onPressHome} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport Column from \"../Column\";\nimport FlexView from \"../FlexView\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst flags = {\n    us: require(\"../../../assets/flags/us.png\"),\n    cn: require(\"../../../assets/flags/cn.png\"),\n    kr: require(\"../../../assets/flags/kr.png\")\n};\n\nconst WebFooter = () => {\n    const onPressAlchemy = useLinker(\n        \"https://dashboard.alchemyapi.io/signup?referral=429fb682-0d85-40ab-ad88-daf847cf7c63\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ width: \"100%\", padding: Spacing.normal, alignItems: \"center\" }}>\n                <SocialIcons />\n                {/* <TouchableHighlight onPress={onPressAlchemy}>\n                    <Image\n                        source={require(\"../../../assets/alchemy.png\")}\n                        style={{ width: 188, height: 40, marginTop: Spacing.tiny }}\n                    />\n                </TouchableHighlight> */}\n                <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                    Built with ❤️ by StandardHashrate (v{Constants.manifest.version})\n                </Text>\n                <FlexView style={{ marginTop: Spacing.small }}>\n                    <Flag name={\"us\"} locale={\"en\"} />\n                    <Flag name={\"cn\"} locale={\"zh\"} />\n                    <Flag name={\"kr\"} locale={\"ko\"} />\n                </FlexView>\n            </View>\n        </Column>\n    );\n};\n\nconst Flag = ({ name, locale }) => {\n    const history = useHistory();\n    const location = useLocation();\n    const onPress = () => {\n        history.push(location.pathname + \"?locale=\" + locale);\n    };\n    return (\n        <TouchableHighlight onPress={onPress} style={{ marginHorizontal: 4 }}>\n            <Image source={flags[name]} style={{ width: 30, height: 20 }} />\n        </TouchableHighlight>\n    );\n};\n\nexport default WebFooter;\n","module.exports = __webpack_public_path__ + \"static/media/us.d367121f.png\";","module.exports = __webpack_public_path__ + \"static/media/cn.baedda5d.png\";","module.exports = __webpack_public_path__ + \"static/media/kr.146730ea.png\";","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    const t = useTranslation();\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"fetching\")} disabled={true} />;\n};\nexport default FetchingButton;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : \"Fetching…\";\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text note={!IS_DESKTOP} fontWeight={\"bold\"} style={{ color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                note={!IS_DESKTOP}\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isETH, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"numeric\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (isETH(props.token)) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const t = useTranslation();\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={t(\"approve\") + \" \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import { FACTORY_ADDRESS as SUSHISWAP_FACTORY, Pair } from \"@sushiswap/sdk\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport { FACTORY_ADDRESS as UNISWAP_FACTORY } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\n\nimport Fraction from \"../constants/Fraction\";\nimport { ETH } from \"../constants/tokens\";\nimport { ALCHEMY_PROVIDER } from \"../context/EthersContext\";\nimport { Order, OrderStatus } from \"../hooks/useSettlement\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { useCallback } from \"react\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nimport {\n    convertToken,\n    formatBalance,\n    getContract,\n    isETH,\n    isWETH,\n    parseBalance,\n    parseCurrencyAmount,\n    pow10\n} from \"./index\";\nexport const fetchTotalMinedRTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewAllTimeTotalMined();\n    return value;\n};\n\nexport const fetchCurrentTotalStakedSTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.balanceOf(BTCSTFarm);\n    console.log(\"fetchCurrentTotalStakedSTokenInpool\");\n    console.log(value);\n    return value;\n};\n\nexport const viewTotalRewardInPoolFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPoolFrom(account);\n    return value;\n    \n};\nexport const totalSupplyOfSToken = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.totalSupply();\n    return value;\n};\n\nexport const viewTotalRewardInPool = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPool();\n    return value;\n};\n\nexport const getFreeToTransferAmount = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"ISTokenERC20\",BTCST,provider);\n    const value = await contract.getFreeToTransferAmount(account);\n    return value;\n};\n\nexport const viewUserInfo = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewUserInfo(account);\n    return value;\n};\n\nexport const stakeActions = ()=>{\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiDepositToMining(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiDepositToMining(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiWithdrawLatestSToken(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiWithdrawLatestSToken(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport const viewTotalMinedRewardFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalMinedRewardFrom(account);\n    return value;\n};\n\nexport const viewGetTotalRewardBalanceInPool = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewGetTotalRewardBalanceInPool(account);\n    return value;\n};\n\nexport const apiClaimAmountOfReward = async(account: string,amount: ethers.BigNumber,reCalculate :boolean ,signer: ethers.Signer)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,signer);\n    const gasLimit = await contract.estimateGas.apiClaimAmountOfReward(account,amount,reCalculate);\n    const tx = await contract.apiClaimAmountOfReward(account,amount,reCalculate, {\n        gasLimit: gasLimit.mul(120).div(100)\n    });\n    return logTransaction(tx, \"farmActions.apiClaimAmountOfReward()\", amount.toString());\n};","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport { isWETH } from \"../utils\";\nimport { fetchLPTokenWithValue, fetchMyLPTokens, fetchMyPools } from \"../utils/fetch-utils\";\nimport useSDK from \"./useSDK\";\nimport { viewUserInfo,getFreeToTransferAmount,totalSupplyOfSToken,stakeActions, fetchCurrentTotalStakedSTokenInpool,viewTotalRewardInPoolFrom} from \"../utils/api-utils\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { getContract, parseBalance } from \"../utils\";\n\nexport interface StakingState {\n    loading:boolean;\n    stoken?: Token;\n    \n    amount: string;\n    setAmount: (amount: string) => void;\n\n    yourTotalSToken:ethers.BigNumber;\n    yourFreeToSendSToken:ethers.BigNumber;\n    yourSTokenStaked:ethers.BigNumber;\n\n    stokenAllowed: boolean;\n    setSTokenAllowed: (allowed: boolean) => void;\n    \n    totalSTokenSupply:ethers.BigNumber;\n\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n\n    txHappend:number;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useSTStakingState = () => {\n    const { provider,signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n\n    const [amount, setAmount] = useState(\"\");\n    const { enter, leave } = stakeActions();\n    const [stoken,setSToken] = useState<Token>();\n    const [loading,setloading] = useState(true);\n    const [stokenAllowed, setSTokenAllowed] = useState(false);\n\n    const [yourTotalSToken,setYourTotalSToken] = useState<ethers.BigNumber>();\n    const [yourFreeToSendSToken,setYourFreeToSendSToken] = useState<ethers.BigNumber>();\n    const [yourSTokenStaked,setYourSTokenStaked] = useState<ethers.BigNumber>();\n    const [totalSTokenSupply,setTotalSTokenSupply] = useState<ethers.BigNumber>();\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n    const [txHappend,setTxHappend] = useState<number>(0);\n\n    const sToken :Token ={\n        name: \"Standard BTC Hashrate Token\",\n        address: BTCST,\n        decimals: 18,\n        symbol: \"BTCST\",\n        logoURI: \"\",\n        balance: ethers.BigNumber.from(0)\n    };\n\n    useEffect(() => {\n        setAmount(\"\");\n        setSToken(sToken);\n        setloading(true);\n        setYourFreeToSendSToken(ethers.BigNumber.from(0));\n        setYourSTokenStaked(ethers.BigNumber.from(0));\n        setYourTotalSToken(ethers.BigNumber.from(0));\n        setTxHappend(0);\n    }, [address]);\n    useAsyncEffect(async()=>{\n        if (provider && signer && stoken) {\n            setSTokenAllowed(false);\n            setloading(true);\n            try{\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const stokenAllowance = await getTokenAllowance(stoken.address, BTCSTFarm);\n                setSTokenAllowed(ethers.BigNumber.from(stokenAllowance).gte(minAllowance));\n                const freeToMove = await getFreeToTransferAmount(await signer.getAddress(),provider);\n                const userInfoInFarm = await viewUserInfo(await signer.getAddress(),provider);\n                setYourFreeToSendSToken(await freeToMove);\n                setYourSTokenStaked((await userInfoInFarm).amount);\n                const stokenContract = getContract(\"ERC20\", BTCST, signer);\n                setYourTotalSToken(await stokenContract.balanceOf(signer.getAddress()));\n                setTotalSTokenSupply(await totalSupplyOfSToken(provider));\n            }finally{\n                setloading(false);\n            }\n        }\n    },[provider,signer,stoken,txHappend]);\n    const onEnter = useCallback(async () => {\n        if (amount && stoken && signer) {\n            setEntering(true);\n            try {\n                const parsed = parseBalance(amount, stoken.decimals);\n                const tx = await enter(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    // await updateTokens();\n                    setAmount(\"\");\n                    const txs = txHappend+1;\n                    setTxHappend(txs);\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, stoken, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && signer &&stoken) {\n            setLeaving(true);\n            try {\n                const parsed = parseBalance(amount, stoken.decimals);\n                const tx = await leave(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    // await updateTokens();\n                    setAmount(\"\");\n                    const txs = txHappend+1;\n                    setTxHappend(txs);\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, stoken, signer]);\n    return {\n        loading,\n        amount,\n        setAmount,\n        stoken,\n        yourTotalSToken,\n        yourFreeToSendSToken,\n        yourSTokenStaked,\n        stokenAllowed,\n        setSTokenAllowed,\n        totalSTokenSupply,\n        onEnter,\n        entering,\n        onLeave,\n        leaving,\n        txHappend\n    };\n};\n\nexport default useSTStakingState;\n","import React, { useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport useSTStakingState, { StakingState } from \"../hooks/useSTStakingState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\nimport useColors from \"../hooks/useColors\";\nimport { ethers } from \"ethers\";\n\nconst SHTStakeScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"stake\")} />\n                    <Text light={true}>{t(\"stake-desc\")+\" \"\n                                    +t(\"or\")+\" \"+t(\"just-send-to-address\")+\" \"+BTCSTFarm}</Text>\n                    <Staking />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <StakingSubMenu />\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const t = useTranslation();\n    const state = useSTStakingState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <STokenBalance state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.stoken && state.yourTotalSToken?.isZero() && (\n                <Notice text={t(\"you-dont-have-btcst\")} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <StakeInfo state={state} />\n        </View>\n    );\n};\n\nconst STokenBalance = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    const {loading,yourTotalSToken,yourFreeToSendSToken,yourSTokenStaked,stokenAllowed} = state;\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <View>\n            <Heading text={t(\"your-BTCTS\")} />\n            <Text\n                style={{\n                    fontSize: IS_DESKTOP ? 28 : 20,\n                    marginBottom: Spacing.tiny,\n                    color: loading? textLight : textDark \n                }}>\n                {loading || !state.stoken || !yourTotalSToken? t(\"fetching\")\n                    :t(\"you-have\")+\" \"+formatBalance(yourTotalSToken, state.stoken.decimals)+\" BTCST\"\n                    }\n            </Text>\n            <Text\n                style={{\n                    fontSize: IS_DESKTOP ? 14 : 10,                    \n                    marginBottom: Spacing.tiny,\n                    color: loading? textLight : textDark \n                }}>\n                {loading || !state.stoken || !yourTotalSToken? \"\"\n                :t(\"free-to-send\")+formatBalance(yourFreeToSendSToken, state.stoken.decimals)+\" \"\n                +t(\"staked-in-pool\")+formatBalance(yourSTokenStaked, state.stoken.decimals)}\n            </Text>\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    if (!state.stoken || state.yourTotalSToken.isZero()) {\n        return <Heading text={t(\"amount-to-stake\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={t(\"amount-to-stake\")} />\n            <TokenInput\n                token={state.stoken}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst StakeInfo = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    const disabled =\n        !state.stoken ||\n        state.yourTotalSToken.isZero() ||\n        !state.yourSTokenStaked ||\n        isEmptyValue(state.amount);\n        \n    const powerPrice = ethers.FixedNumber.from(58).divUnsafe(ethers.FixedNumber.from(1000*1000));\n    const powerPerHashUnitDay = ethers.FixedNumber.from(60).mulUnsafe(ethers.FixedNumber.from(24));\n    const dailyBTCYeild = ethers.FixedNumber.from(711).divUnsafe(ethers.FixedNumber.from(100000000));\n    const btcPrice = ethers.FixedNumber.from(22715);\n    const dailyBTCNetrewardPerHashUnit = dailyBTCYeild.subUnsafe(\n        powerPerHashUnitDay.mulUnsafe(powerPrice).divUnsafe(btcPrice));\n\n    console.log(dailyBTCNetrewardPerHashUnit.toString()+\" dailyBTCNetrewardPerHashUnit\");\n    \n    const dailyReward = disabled\n        ? undefined\n        : ethers.FixedNumber.from(state.amount)\n              .mulUnsafe(dailyBTCNetrewardPerHashUnit)\n              .divUnsafe(ethers.FixedNumber.from(10));\n    const alreadyReward = disabled\n        ? undefined\n        : ethers.FixedNumber.from(formatBalance(state.yourSTokenStaked,state.stoken!.decimals))\n            .mulUnsafe(dailyBTCNetrewardPerHashUnit)\n            .divUnsafe(ethers.FixedNumber.from(10));\n    const suppose = disabled? undefined:dailyReward?.addUnsafe(alreadyReward!);\n    // console.log(dailyReward?.toString()+\" dailyReward\");\n\n    const dailyRewardTotal = disabled ? undefined : \n            ethers.FixedNumber.fromString(formatBalance(state.totalSTokenSupply,state.stoken!.decimals))\n            .divUnsafe(ethers.FixedNumber.from(10)).mulUnsafe(dailyBTCNetrewardPerHashUnit);\n    const stoenBalance = disabled ? undefined : \n                            parseBalance(state.amount, state.stoken!.decimals)\n                            .add(state.yourSTokenStaked!);\n\n    const share = disabled\n        ? undefined\n        : suppose!.divUnsafe(dailyRewardTotal!).mulUnsafe(ethers.FixedNumber.from(100)).round(6);\n    return (\n        <InfoBox>\n            <AmountMeta\n                amount={suppose ? suppose.round(8).toString() : \"\"}\n                suffix={\"BBTC(\"+t(\"estimated\")+\")\"}\n                disabled={disabled}\n            />\n            <Meta label={t(\"daily-share\")} text={share} suffix={\"%\"} disabled={disabled} />\n            <Meta label={t(\"total-daily-reward\")} text={dailyRewardTotal?.toString()} disabled={disabled} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.stoken || state.yourTotalSToken.isZero() || isEmptyValue(state.amount) ? (\n                <StakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.stoken.decimals).gt(state.yourTotalSToken) ? (\n                <InsufficientBalanceButton symbol={state.stoken.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.stoken}\n                        spender={BTCSTFarm}\n                        onSuccess={() => state.setSTokenAllowed(true)}\n                        onError={setError}\n                        hidden={state.stokenAllowed}\n                    />\n                    <StakeButton state={state} onError={setError} disabled={!state.stokenAllowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst StakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onEnter();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={t(\"stake\")} loading={state.entering} onPress={onPress} disabled={disabled} />;\n};\n\nexport default SHTStakeScreen;\n"],"sourceRoot":""}